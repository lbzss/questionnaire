// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"questionnaire/ent/questionnaire"
	"questionnaire/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Questionnaire is the model entity for the Questionnaire schema.
type Questionnaire struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Object holds the value of the "object" field.
	Object string `json:"object,omitempty"`
	// 是否为匿名填写
	Anonymous int `json:"anonymous,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionnaireQuery when eager-loading is set.
	Edges        QuestionnaireEdges `json:"edges"`
	user_create  *int
	selectValues sql.SelectValues
}

// QuestionnaireEdges holds the relations/edges for other nodes in the graph.
type QuestionnaireEdges struct {
	// Include holds the value of the include edge.
	Include []*Question `json:"include,omitempty"`
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// IncludeOrErr returns the Include value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionnaireEdges) IncludeOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Include, nil
	}
	return nil, &NotLoadedError{edge: "include"}
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionnaireEdges) CreatedByOrErr() (*User, error) {
	if e.CreatedBy != nil {
		return e.CreatedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Questionnaire) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionnaire.FieldID, questionnaire.FieldAnonymous:
			values[i] = new(sql.NullInt64)
		case questionnaire.FieldName, questionnaire.FieldDescription, questionnaire.FieldObject:
			values[i] = new(sql.NullString)
		case questionnaire.FieldCreatedAt, questionnaire.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case questionnaire.ForeignKeys[0]: // user_create
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Questionnaire fields.
func (q *Questionnaire) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionnaire.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case questionnaire.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case questionnaire.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case questionnaire.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				q.Name = value.String
			}
		case questionnaire.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				q.Description = value.String
			}
		case questionnaire.FieldObject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object", values[i])
			} else if value.Valid {
				q.Object = value.String
			}
		case questionnaire.FieldAnonymous:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field anonymous", values[i])
			} else if value.Valid {
				q.Anonymous = int(value.Int64)
			}
		case questionnaire.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_create", value)
			} else if value.Valid {
				q.user_create = new(int)
				*q.user_create = int(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Questionnaire.
// This includes values selected through modifiers, order, etc.
func (q *Questionnaire) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryInclude queries the "include" edge of the Questionnaire entity.
func (q *Questionnaire) QueryInclude() *QuestionQuery {
	return NewQuestionnaireClient(q.config).QueryInclude(q)
}

// QueryCreatedBy queries the "created_by" edge of the Questionnaire entity.
func (q *Questionnaire) QueryCreatedBy() *UserQuery {
	return NewQuestionnaireClient(q.config).QueryCreatedBy(q)
}

// Update returns a builder for updating this Questionnaire.
// Note that you need to call Questionnaire.Unwrap() before calling this method if this Questionnaire
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Questionnaire) Update() *QuestionnaireUpdateOne {
	return NewQuestionnaireClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Questionnaire entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Questionnaire) Unwrap() *Questionnaire {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Questionnaire is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Questionnaire) String() string {
	var builder strings.Builder
	builder.WriteString("Questionnaire(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(q.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(q.Description)
	builder.WriteString(", ")
	builder.WriteString("object=")
	builder.WriteString(q.Object)
	builder.WriteString(", ")
	builder.WriteString("anonymous=")
	builder.WriteString(fmt.Sprintf("%v", q.Anonymous))
	builder.WriteByte(')')
	return builder.String()
}

// Questionnaires is a parsable slice of Questionnaire.
type Questionnaires []*Questionnaire
