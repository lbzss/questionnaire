// Code generated by ent, DO NOT EDIT.

package answer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the answer type in the database.
	Label = "answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAnswerChoice holds the string denoting the answer_choice field in the database.
	FieldAnswerChoice = "answer_choice"
	// FieldAnswerText holds the string denoting the answer_text field in the database.
	FieldAnswerText = "answer_text"
	// FieldQuestionnaireID holds the string denoting the questionnaire_id field in the database.
	FieldQuestionnaireID = "questionnaire_id"
	// FieldQuestionID holds the string denoting the question_id field in the database.
	FieldQuestionID = "question_id"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// Table holds the table name of the answer in the database.
	Table = "answers"
	// QuestionTable is the table that holds the question relation/edge. The primary key declared below.
	QuestionTable = "question_own"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
)

// Columns holds all SQL columns for answer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAnswerChoice,
	FieldAnswerText,
	FieldQuestionnaireID,
	FieldQuestionID,
}

var (
	// QuestionPrimaryKey and QuestionColumn2 are the table columns denoting the
	// primary key for the question relation (M2M).
	QuestionPrimaryKey = []string{"question_id", "answer_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Answer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAnswerChoice orders the results by the answer_choice field.
func ByAnswerChoice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerChoice, opts...).ToFunc()
}

// ByAnswerText orders the results by the answer_text field.
func ByAnswerText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerText, opts...).ToFunc()
}

// ByQuestionnaireID orders the results by the questionnaire_id field.
func ByQuestionnaireID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionnaireID, opts...).ToFunc()
}

// ByQuestionID orders the results by the question_id field.
func ByQuestionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionID, opts...).ToFunc()
}

// ByQuestionCount orders the results by question count.
func ByQuestionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionStep(), opts...)
	}
}

// ByQuestion orders the results by question terms.
func ByQuestion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, QuestionTable, QuestionPrimaryKey...),
	)
}
