// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"questionnaire/ent/answer"
	"questionnaire/ent/predicate"
	"questionnaire/ent/question"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerUpdate is the builder for updating Answer entities.
type AnswerUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerMutation
}

// Where appends a list predicates to the AnswerUpdate builder.
func (au *AnswerUpdate) Where(ps ...predicate.Answer) *AnswerUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AnswerUpdate) SetCreatedAt(t time.Time) *AnswerUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableCreatedAt(t *time.Time) *AnswerUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AnswerUpdate) SetUpdatedAt(t time.Time) *AnswerUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetAnswerChoice sets the "answer_choice" field.
func (au *AnswerUpdate) SetAnswerChoice(i int) *AnswerUpdate {
	au.mutation.ResetAnswerChoice()
	au.mutation.SetAnswerChoice(i)
	return au
}

// SetNillableAnswerChoice sets the "answer_choice" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableAnswerChoice(i *int) *AnswerUpdate {
	if i != nil {
		au.SetAnswerChoice(*i)
	}
	return au
}

// AddAnswerChoice adds i to the "answer_choice" field.
func (au *AnswerUpdate) AddAnswerChoice(i int) *AnswerUpdate {
	au.mutation.AddAnswerChoice(i)
	return au
}

// SetAnswerText sets the "answer_text" field.
func (au *AnswerUpdate) SetAnswerText(s string) *AnswerUpdate {
	au.mutation.SetAnswerText(s)
	return au
}

// SetNillableAnswerText sets the "answer_text" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableAnswerText(s *string) *AnswerUpdate {
	if s != nil {
		au.SetAnswerText(*s)
	}
	return au
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (au *AnswerUpdate) SetQuestionnaireID(i int64) *AnswerUpdate {
	au.mutation.ResetQuestionnaireID()
	au.mutation.SetQuestionnaireID(i)
	return au
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableQuestionnaireID(i *int64) *AnswerUpdate {
	if i != nil {
		au.SetQuestionnaireID(*i)
	}
	return au
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (au *AnswerUpdate) AddQuestionnaireID(i int64) *AnswerUpdate {
	au.mutation.AddQuestionnaireID(i)
	return au
}

// SetQuestionID sets the "question_id" field.
func (au *AnswerUpdate) SetQuestionID(i int64) *AnswerUpdate {
	au.mutation.ResetQuestionID()
	au.mutation.SetQuestionID(i)
	return au
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (au *AnswerUpdate) SetNillableQuestionID(i *int64) *AnswerUpdate {
	if i != nil {
		au.SetQuestionID(*i)
	}
	return au
}

// AddQuestionID adds i to the "question_id" field.
func (au *AnswerUpdate) AddQuestionID(i int64) *AnswerUpdate {
	au.mutation.AddQuestionID(i)
	return au
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (au *AnswerUpdate) AddQuestionIDs(ids ...int) *AnswerUpdate {
	au.mutation.AddQuestionIDs(ids...)
	return au
}

// AddQuestion adds the "question" edges to the Question entity.
func (au *AnswerUpdate) AddQuestion(q ...*Question) *AnswerUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return au.AddQuestionIDs(ids...)
}

// Mutation returns the AnswerMutation object of the builder.
func (au *AnswerUpdate) Mutation() *AnswerMutation {
	return au.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (au *AnswerUpdate) ClearQuestion() *AnswerUpdate {
	au.mutation.ClearQuestion()
	return au
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (au *AnswerUpdate) RemoveQuestionIDs(ids ...int) *AnswerUpdate {
	au.mutation.RemoveQuestionIDs(ids...)
	return au
}

// RemoveQuestion removes "question" edges to Question entities.
func (au *AnswerUpdate) RemoveQuestion(q ...*Question) *AnswerUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return au.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnswerUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnswerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnswerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AnswerUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := answer.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

func (au *AnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(answer.Table, answer.Columns, sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(answer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.AnswerChoice(); ok {
		_spec.SetField(answer.FieldAnswerChoice, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedAnswerChoice(); ok {
		_spec.AddField(answer.FieldAnswerChoice, field.TypeInt, value)
	}
	if value, ok := au.mutation.AnswerText(); ok {
		_spec.SetField(answer.FieldAnswerText, field.TypeString, value)
	}
	if value, ok := au.mutation.QuestionnaireID(); ok {
		_spec.SetField(answer.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedQuestionnaireID(); ok {
		_spec.AddField(answer.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.QuestionID(); ok {
		_spec.SetField(answer.FieldQuestionID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedQuestionID(); ok {
		_spec.AddField(answer.FieldQuestionID, field.TypeInt64, value)
	}
	if au.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !au.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnswerUpdateOne is the builder for updating a single Answer entity.
type AnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerMutation
}

// SetCreatedAt sets the "created_at" field.
func (auo *AnswerUpdateOne) SetCreatedAt(t time.Time) *AnswerUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *AnswerUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AnswerUpdateOne) SetUpdatedAt(t time.Time) *AnswerUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetAnswerChoice sets the "answer_choice" field.
func (auo *AnswerUpdateOne) SetAnswerChoice(i int) *AnswerUpdateOne {
	auo.mutation.ResetAnswerChoice()
	auo.mutation.SetAnswerChoice(i)
	return auo
}

// SetNillableAnswerChoice sets the "answer_choice" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableAnswerChoice(i *int) *AnswerUpdateOne {
	if i != nil {
		auo.SetAnswerChoice(*i)
	}
	return auo
}

// AddAnswerChoice adds i to the "answer_choice" field.
func (auo *AnswerUpdateOne) AddAnswerChoice(i int) *AnswerUpdateOne {
	auo.mutation.AddAnswerChoice(i)
	return auo
}

// SetAnswerText sets the "answer_text" field.
func (auo *AnswerUpdateOne) SetAnswerText(s string) *AnswerUpdateOne {
	auo.mutation.SetAnswerText(s)
	return auo
}

// SetNillableAnswerText sets the "answer_text" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableAnswerText(s *string) *AnswerUpdateOne {
	if s != nil {
		auo.SetAnswerText(*s)
	}
	return auo
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (auo *AnswerUpdateOne) SetQuestionnaireID(i int64) *AnswerUpdateOne {
	auo.mutation.ResetQuestionnaireID()
	auo.mutation.SetQuestionnaireID(i)
	return auo
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableQuestionnaireID(i *int64) *AnswerUpdateOne {
	if i != nil {
		auo.SetQuestionnaireID(*i)
	}
	return auo
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (auo *AnswerUpdateOne) AddQuestionnaireID(i int64) *AnswerUpdateOne {
	auo.mutation.AddQuestionnaireID(i)
	return auo
}

// SetQuestionID sets the "question_id" field.
func (auo *AnswerUpdateOne) SetQuestionID(i int64) *AnswerUpdateOne {
	auo.mutation.ResetQuestionID()
	auo.mutation.SetQuestionID(i)
	return auo
}

// SetNillableQuestionID sets the "question_id" field if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableQuestionID(i *int64) *AnswerUpdateOne {
	if i != nil {
		auo.SetQuestionID(*i)
	}
	return auo
}

// AddQuestionID adds i to the "question_id" field.
func (auo *AnswerUpdateOne) AddQuestionID(i int64) *AnswerUpdateOne {
	auo.mutation.AddQuestionID(i)
	return auo
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (auo *AnswerUpdateOne) AddQuestionIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.AddQuestionIDs(ids...)
	return auo
}

// AddQuestion adds the "question" edges to the Question entity.
func (auo *AnswerUpdateOne) AddQuestion(q ...*Question) *AnswerUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return auo.AddQuestionIDs(ids...)
}

// Mutation returns the AnswerMutation object of the builder.
func (auo *AnswerUpdateOne) Mutation() *AnswerMutation {
	return auo.mutation
}

// ClearQuestion clears all "question" edges to the Question entity.
func (auo *AnswerUpdateOne) ClearQuestion() *AnswerUpdateOne {
	auo.mutation.ClearQuestion()
	return auo
}

// RemoveQuestionIDs removes the "question" edge to Question entities by IDs.
func (auo *AnswerUpdateOne) RemoveQuestionIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.RemoveQuestionIDs(ids...)
	return auo
}

// RemoveQuestion removes "question" edges to Question entities.
func (auo *AnswerUpdateOne) RemoveQuestion(q ...*Question) *AnswerUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return auo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the AnswerUpdate builder.
func (auo *AnswerUpdateOne) Where(ps ...predicate.Answer) *AnswerUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnswerUpdateOne) Select(field string, fields ...string) *AnswerUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Answer entity.
func (auo *AnswerUpdateOne) Save(ctx context.Context) (*Answer, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnswerUpdateOne) SaveX(ctx context.Context) *Answer {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnswerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AnswerUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := answer.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

func (auo *AnswerUpdateOne) sqlSave(ctx context.Context) (_node *Answer, err error) {
	_spec := sqlgraph.NewUpdateSpec(answer.Table, answer.Columns, sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Answer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answer.FieldID)
		for _, f := range fields {
			if !answer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(answer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(answer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.AnswerChoice(); ok {
		_spec.SetField(answer.FieldAnswerChoice, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedAnswerChoice(); ok {
		_spec.AddField(answer.FieldAnswerChoice, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AnswerText(); ok {
		_spec.SetField(answer.FieldAnswerText, field.TypeString, value)
	}
	if value, ok := auo.mutation.QuestionnaireID(); ok {
		_spec.SetField(answer.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedQuestionnaireID(); ok {
		_spec.AddField(answer.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.QuestionID(); ok {
		_spec.SetField(answer.FieldQuestionID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedQuestionID(); ok {
		_spec.AddField(answer.FieldQuestionID, field.TypeInt64, value)
	}
	if auo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedQuestionIDs(); len(nodes) > 0 && !auo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: answer.QuestionPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Answer{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
