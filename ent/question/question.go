// Code generated by ent, DO NOT EDIT.

package question

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the question type in the database.
	Label = "question"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldQuestion holds the string denoting the question field in the database.
	FieldQuestion = "question"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldQuestionnaireID holds the string denoting the questionnaire_id field in the database.
	FieldQuestionnaireID = "questionnaire_id"
	// EdgeOwn holds the string denoting the own edge name in mutations.
	EdgeOwn = "own"
	// EdgeIncluded holds the string denoting the included edge name in mutations.
	EdgeIncluded = "included"
	// Table holds the table name of the question in the database.
	Table = "questions"
	// OwnTable is the table that holds the own relation/edge. The primary key declared below.
	OwnTable = "question_own"
	// OwnInverseTable is the table name for the Answer entity.
	// It exists in this package in order to avoid circular dependency with the "answer" package.
	OwnInverseTable = "answers"
	// IncludedTable is the table that holds the included relation/edge. The primary key declared below.
	IncludedTable = "questionnaire_include"
	// IncludedInverseTable is the table name for the Questionnaire entity.
	// It exists in this package in order to avoid circular dependency with the "questionnaire" package.
	IncludedInverseTable = "questionnaires"
)

// Columns holds all SQL columns for question fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldQuestion,
	FieldType,
	FieldQuestionnaireID,
}

var (
	// OwnPrimaryKey and OwnColumn2 are the table columns denoting the
	// primary key for the own relation (M2M).
	OwnPrimaryKey = []string{"question_id", "answer_id"}
	// IncludedPrimaryKey and IncludedColumn2 are the table columns denoting the
	// primary key for the included relation (M2M).
	IncludedPrimaryKey = []string{"questionnaire_id", "question_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Question queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQuestion orders the results by the question field.
func ByQuestion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestion, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByQuestionnaireID orders the results by the questionnaire_id field.
func ByQuestionnaireID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuestionnaireID, opts...).ToFunc()
}

// ByOwnCount orders the results by own count.
func ByOwnCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnStep(), opts...)
	}
}

// ByOwn orders the results by own terms.
func ByOwn(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIncludedCount orders the results by included count.
func ByIncludedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIncludedStep(), opts...)
	}
}

// ByIncluded orders the results by included terms.
func ByIncluded(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIncludedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, OwnTable, OwnPrimaryKey...),
	)
}
func newIncludedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IncludedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IncludedTable, IncludedPrimaryKey...),
	)
}
