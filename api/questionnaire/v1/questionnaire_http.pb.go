// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.6
// source: questionnaire/v1/questionnaire.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQuestionnaireCreateQuestion = "/questionnaire.v1.Questionnaire/CreateQuestion"
const OperationQuestionnaireCreateQuestionnaire = "/questionnaire.v1.Questionnaire/CreateQuestionnaire"
const OperationQuestionnaireDeleteQuestion = "/questionnaire.v1.Questionnaire/DeleteQuestion"
const OperationQuestionnaireDeleteQuestionnaire = "/questionnaire.v1.Questionnaire/DeleteQuestionnaire"
const OperationQuestionnaireGetQuestionnaire = "/questionnaire.v1.Questionnaire/GetQuestionnaire"
const OperationQuestionnaireGetQuestions = "/questionnaire.v1.Questionnaire/GetQuestions"
const OperationQuestionnaireListQuestion = "/questionnaire.v1.Questionnaire/ListQuestion"
const OperationQuestionnaireListQuestionnaire = "/questionnaire.v1.Questionnaire/ListQuestionnaire"
const OperationQuestionnaireSubmitAnswer = "/questionnaire.v1.Questionnaire/SubmitAnswer"
const OperationQuestionnaireSubmitAnswerBulk = "/questionnaire.v1.Questionnaire/SubmitAnswerBulk"
const OperationQuestionnaireUpdateQuestion = "/questionnaire.v1.Questionnaire/UpdateQuestion"
const OperationQuestionnaireUpdateQuestionnaire = "/questionnaire.v1.Questionnaire/UpdateQuestionnaire"

type QuestionnaireHTTPServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionReply, error)
	CreateQuestionnaire(context.Context, *CreateQuestionnaireRequest) (*CreateQuestionnaireReply, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionReply, error)
	DeleteQuestionnaire(context.Context, *DeleteQuestionnaireRequest) (*DeleteQuestionnaireReply, error)
	GetQuestionnaire(context.Context, *GetQuestionnaireRequest) (*GetQuestionnaireReply, error)
	GetQuestions(context.Context, *GetQuestionRequest) (*GetQuestionReply, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionReply, error)
	ListQuestionnaire(context.Context, *ListQuestionnaireRequest) (*ListQuestionnaireReply, error)
	SubmitAnswer(context.Context, *SubmitAnswerSingleRequest) (*SubmitAnswerSingleReply, error)
	SubmitAnswerBulk(context.Context, *SubmitAnswerBulkRequest) (*SubmitAnswerBulkReply, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionReply, error)
	UpdateQuestionnaire(context.Context, *UpdateQuestionnaireRequest) (*UpdateQuestionnaireReply, error)
}

func RegisterQuestionnaireHTTPServer(s *http.Server, srv QuestionnaireHTTPServer) {
	r := s.Route("/")
	r.POST("/questionnaire", _Questionnaire_CreateQuestionnaire0_HTTP_Handler(srv))
	r.GET("/questionnaire/{id}", _Questionnaire_GetQuestionnaire0_HTTP_Handler(srv))
	r.GET("/questionnaire", _Questionnaire_ListQuestionnaire0_HTTP_Handler(srv))
	r.POST("/questionnaire/{id}", _Questionnaire_UpdateQuestionnaire0_HTTP_Handler(srv))
	r.DELETE("/questionnaire/{id}", _Questionnaire_DeleteQuestionnaire0_HTTP_Handler(srv))
	r.POST("/question", _Questionnaire_CreateQuestion0_HTTP_Handler(srv))
	r.GET("/{questionnaireId}/questions", _Questionnaire_GetQuestions0_HTTP_Handler(srv))
	r.GET("/questions", _Questionnaire_ListQuestion0_HTTP_Handler(srv))
	r.POST("/question/{id}", _Questionnaire_UpdateQuestion0_HTTP_Handler(srv))
	r.DELETE("/question/{id}", _Questionnaire_DeleteQuestion0_HTTP_Handler(srv))
	r.POST("/answer/{questionnaireId}/{questionId}", _Questionnaire_SubmitAnswer0_HTTP_Handler(srv))
	r.POST("/answer/{questionnaireId}", _Questionnaire_SubmitAnswerBulk0_HTTP_Handler(srv))
}

func _Questionnaire_CreateQuestionnaire0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuestionnaireRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireCreateQuestionnaire)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestionnaire(ctx, req.(*CreateQuestionnaireRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQuestionnaireReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_GetQuestionnaire0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuestionnaireRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireGetQuestionnaire)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuestionnaire(ctx, req.(*GetQuestionnaireRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuestionnaireReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_ListQuestionnaire0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuestionnaireRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireListQuestionnaire)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuestionnaire(ctx, req.(*ListQuestionnaireRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuestionnaireReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_UpdateQuestionnaire0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuestionnaireRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireUpdateQuestionnaire)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestionnaire(ctx, req.(*UpdateQuestionnaireRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuestionnaireReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_DeleteQuestionnaire0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuestionnaireRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireDeleteQuestionnaire)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuestionnaire(ctx, req.(*DeleteQuestionnaireRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuestionnaireReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_CreateQuestion0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireCreateQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQuestion(ctx, req.(*CreateQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQuestionReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_GetQuestions0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireGetQuestions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQuestions(ctx, req.(*GetQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQuestionReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_ListQuestion0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireListQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQuestion(ctx, req.(*ListQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQuestionReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_UpdateQuestion0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQuestionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireUpdateQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQuestionReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_DeleteQuestion0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQuestionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireDeleteQuestion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQuestionReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_SubmitAnswer0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitAnswerSingleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireSubmitAnswer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitAnswer(ctx, req.(*SubmitAnswerSingleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitAnswerSingleReply)
		return ctx.Result(200, reply)
	}
}

func _Questionnaire_SubmitAnswerBulk0_HTTP_Handler(srv QuestionnaireHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SubmitAnswerBulkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQuestionnaireSubmitAnswerBulk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SubmitAnswerBulk(ctx, req.(*SubmitAnswerBulkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SubmitAnswerBulkReply)
		return ctx.Result(200, reply)
	}
}

type QuestionnaireHTTPClient interface {
	CreateQuestion(ctx context.Context, req *CreateQuestionRequest, opts ...http.CallOption) (rsp *CreateQuestionReply, err error)
	CreateQuestionnaire(ctx context.Context, req *CreateQuestionnaireRequest, opts ...http.CallOption) (rsp *CreateQuestionnaireReply, err error)
	DeleteQuestion(ctx context.Context, req *DeleteQuestionRequest, opts ...http.CallOption) (rsp *DeleteQuestionReply, err error)
	DeleteQuestionnaire(ctx context.Context, req *DeleteQuestionnaireRequest, opts ...http.CallOption) (rsp *DeleteQuestionnaireReply, err error)
	GetQuestionnaire(ctx context.Context, req *GetQuestionnaireRequest, opts ...http.CallOption) (rsp *GetQuestionnaireReply, err error)
	GetQuestions(ctx context.Context, req *GetQuestionRequest, opts ...http.CallOption) (rsp *GetQuestionReply, err error)
	ListQuestion(ctx context.Context, req *ListQuestionRequest, opts ...http.CallOption) (rsp *ListQuestionReply, err error)
	ListQuestionnaire(ctx context.Context, req *ListQuestionnaireRequest, opts ...http.CallOption) (rsp *ListQuestionnaireReply, err error)
	SubmitAnswer(ctx context.Context, req *SubmitAnswerSingleRequest, opts ...http.CallOption) (rsp *SubmitAnswerSingleReply, err error)
	SubmitAnswerBulk(ctx context.Context, req *SubmitAnswerBulkRequest, opts ...http.CallOption) (rsp *SubmitAnswerBulkReply, err error)
	UpdateQuestion(ctx context.Context, req *UpdateQuestionRequest, opts ...http.CallOption) (rsp *UpdateQuestionReply, err error)
	UpdateQuestionnaire(ctx context.Context, req *UpdateQuestionnaireRequest, opts ...http.CallOption) (rsp *UpdateQuestionnaireReply, err error)
}

type QuestionnaireHTTPClientImpl struct {
	cc *http.Client
}

func NewQuestionnaireHTTPClient(client *http.Client) QuestionnaireHTTPClient {
	return &QuestionnaireHTTPClientImpl{client}
}

func (c *QuestionnaireHTTPClientImpl) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...http.CallOption) (*CreateQuestionReply, error) {
	var out CreateQuestionReply
	pattern := "/question"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireCreateQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) CreateQuestionnaire(ctx context.Context, in *CreateQuestionnaireRequest, opts ...http.CallOption) (*CreateQuestionnaireReply, error) {
	var out CreateQuestionnaireReply
	pattern := "/questionnaire"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireCreateQuestionnaire))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...http.CallOption) (*DeleteQuestionReply, error) {
	var out DeleteQuestionReply
	pattern := "/question/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireDeleteQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) DeleteQuestionnaire(ctx context.Context, in *DeleteQuestionnaireRequest, opts ...http.CallOption) (*DeleteQuestionnaireReply, error) {
	var out DeleteQuestionnaireReply
	pattern := "/questionnaire/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireDeleteQuestionnaire))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) GetQuestionnaire(ctx context.Context, in *GetQuestionnaireRequest, opts ...http.CallOption) (*GetQuestionnaireReply, error) {
	var out GetQuestionnaireReply
	pattern := "/questionnaire/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireGetQuestionnaire))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) GetQuestions(ctx context.Context, in *GetQuestionRequest, opts ...http.CallOption) (*GetQuestionReply, error) {
	var out GetQuestionReply
	pattern := "/{questionnaireId}/questions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireGetQuestions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...http.CallOption) (*ListQuestionReply, error) {
	var out ListQuestionReply
	pattern := "/questions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireListQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) ListQuestionnaire(ctx context.Context, in *ListQuestionnaireRequest, opts ...http.CallOption) (*ListQuestionnaireReply, error) {
	var out ListQuestionnaireReply
	pattern := "/questionnaire"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQuestionnaireListQuestionnaire))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) SubmitAnswer(ctx context.Context, in *SubmitAnswerSingleRequest, opts ...http.CallOption) (*SubmitAnswerSingleReply, error) {
	var out SubmitAnswerSingleReply
	pattern := "/answer/{questionnaireId}/{questionId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireSubmitAnswer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) SubmitAnswerBulk(ctx context.Context, in *SubmitAnswerBulkRequest, opts ...http.CallOption) (*SubmitAnswerBulkReply, error) {
	var out SubmitAnswerBulkReply
	pattern := "/answer/{questionnaireId}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireSubmitAnswerBulk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...http.CallOption) (*UpdateQuestionReply, error) {
	var out UpdateQuestionReply
	pattern := "/question/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireUpdateQuestion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *QuestionnaireHTTPClientImpl) UpdateQuestionnaire(ctx context.Context, in *UpdateQuestionnaireRequest, opts ...http.CallOption) (*UpdateQuestionnaireReply, error) {
	var out UpdateQuestionnaireReply
	pattern := "/questionnaire/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQuestionnaireUpdateQuestionnaire))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
