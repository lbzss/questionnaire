// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.19.6
// source: questionnaire/v1/questionnaire.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QuestionType int32

const (
	QuestionType_UNSPECIFIED QuestionType = 0
	QuestionType_TEXT        QuestionType = 1
	QuestionType_CHOICE      QuestionType = 2
)

// Enum value maps for QuestionType.
var (
	QuestionType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "TEXT",
		2: "CHOICE",
	}
	QuestionType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"TEXT":        1,
		"CHOICE":      2,
	}
)

func (x QuestionType) Enum() *QuestionType {
	p := new(QuestionType)
	*p = x
	return p
}

func (x QuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_questionnaire_v1_questionnaire_proto_enumTypes[0].Descriptor()
}

func (QuestionType) Type() protoreflect.EnumType {
	return &file_questionnaire_v1_questionnaire_proto_enumTypes[0]
}

func (x QuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionType.Descriptor instead.
func (QuestionType) EnumDescriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{0}
}

type QuestionnaireInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Object      string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *QuestionnaireInfo) Reset() {
	*x = QuestionnaireInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireInfo) ProtoMessage() {}

func (x *QuestionnaireInfo) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireInfo.ProtoReflect.Descriptor instead.
func (*QuestionnaireInfo) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{0}
}

func (x *QuestionnaireInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionnaireInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QuestionnaireInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QuestionnaireInfo) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type CreateQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Object      string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *CreateQuestionnaireRequest) Reset() {
	*x = CreateQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionnaireRequest) ProtoMessage() {}

func (x *CreateQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{1}
}

func (x *CreateQuestionnaireRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateQuestionnaireRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateQuestionnaireRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type CreateQuestionnaireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionnaireInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateQuestionnaireReply) Reset() {
	*x = CreateQuestionnaireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionnaireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionnaireReply) ProtoMessage() {}

func (x *CreateQuestionnaireReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionnaireReply.ProtoReflect.Descriptor instead.
func (*CreateQuestionnaireReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{2}
}

func (x *CreateQuestionnaireReply) GetData() *QuestionnaireInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetQuestionnaireRequest) Reset() {
	*x = GetQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionnaireRequest) ProtoMessage() {}

func (x *GetQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{3}
}

func (x *GetQuestionnaireRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetQuestionnaireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionnaireInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetQuestionnaireReply) Reset() {
	*x = GetQuestionnaireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionnaireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionnaireReply) ProtoMessage() {}

func (x *GetQuestionnaireReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionnaireReply.ProtoReflect.Descriptor instead.
func (*GetQuestionnaireReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{4}
}

func (x *GetQuestionnaireReply) GetData() *QuestionnaireInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListQuestionnaireRequest) Reset() {
	*x = ListQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionnaireRequest) ProtoMessage() {}

func (x *ListQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{5}
}

type ListQuestionnaireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*QuestionnaireInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListQuestionnaireReply) Reset() {
	*x = ListQuestionnaireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionnaireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionnaireReply) ProtoMessage() {}

func (x *ListQuestionnaireReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionnaireReply.ProtoReflect.Descriptor instead.
func (*ListQuestionnaireReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{6}
}

func (x *ListQuestionnaireReply) GetData() []*QuestionnaireInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Object      string `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *UpdateQuestionnaireRequest) Reset() {
	*x = UpdateQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionnaireRequest) ProtoMessage() {}

func (x *UpdateQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateQuestionnaireRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQuestionnaireRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateQuestionnaireRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateQuestionnaireRequest) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

type UpdateQuestionnaireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionnaireInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateQuestionnaireReply) Reset() {
	*x = UpdateQuestionnaireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionnaireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionnaireReply) ProtoMessage() {}

func (x *UpdateQuestionnaireReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionnaireReply.ProtoReflect.Descriptor instead.
func (*UpdateQuestionnaireReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateQuestionnaireReply) GetData() *QuestionnaireInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteQuestionnaireRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuestionnaireRequest) Reset() {
	*x = DeleteQuestionnaireRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionnaireRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionnaireRequest) ProtoMessage() {}

func (x *DeleteQuestionnaireRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionnaireRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionnaireRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteQuestionnaireRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteQuestionnaireReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionnaireInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteQuestionnaireReply) Reset() {
	*x = DeleteQuestionnaireReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionnaireReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionnaireReply) ProtoMessage() {}

func (x *DeleteQuestionnaireReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionnaireReply.ProtoReflect.Descriptor instead.
func (*DeleteQuestionnaireReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteQuestionnaireReply) GetData() *QuestionnaireInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type QuestionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Question        string       `protobuf:"bytes,2,opt,name=question,proto3" json:"question,omitempty"`
	Type            QuestionType `protobuf:"varint,3,opt,name=type,proto3,enum=questionnaire.v1.QuestionType" json:"type,omitempty"`
	QuestionnaireId int64        `protobuf:"varint,4,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
}

func (x *QuestionInfo) Reset() {
	*x = QuestionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionInfo) ProtoMessage() {}

func (x *QuestionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionInfo.ProtoReflect.Descriptor instead.
func (*QuestionInfo) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{11}
}

func (x *QuestionInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QuestionInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionInfo) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_UNSPECIFIED
}

func (x *QuestionInfo) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

type CreateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question        string       `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Type            QuestionType `protobuf:"varint,2,opt,name=type,proto3,enum=questionnaire.v1.QuestionType" json:"type,omitempty"`
	QuestionnaireId int64        `protobuf:"varint,3,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
}

func (x *CreateQuestionRequest) Reset() {
	*x = CreateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionRequest) ProtoMessage() {}

func (x *CreateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionRequest.ProtoReflect.Descriptor instead.
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{12}
}

func (x *CreateQuestionRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *CreateQuestionRequest) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_UNSPECIFIED
}

func (x *CreateQuestionRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

type CreateQuestionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateQuestionReply) Reset() {
	*x = CreateQuestionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuestionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuestionReply) ProtoMessage() {}

func (x *CreateQuestionReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuestionReply.ProtoReflect.Descriptor instead.
func (*CreateQuestionReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{13}
}

func (x *CreateQuestionReply) GetData() *QuestionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionnaireId int64 `protobuf:"varint,1,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
}

func (x *GetQuestionRequest) Reset() {
	*x = GetQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionRequest) ProtoMessage() {}

func (x *GetQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetQuestionRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{14}
}

func (x *GetQuestionRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

type GetQuestionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*QuestionInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetQuestionReply) Reset() {
	*x = GetQuestionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetQuestionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQuestionReply) ProtoMessage() {}

func (x *GetQuestionReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQuestionReply.ProtoReflect.Descriptor instead.
func (*GetQuestionReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{15}
}

func (x *GetQuestionReply) GetData() []*QuestionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListQuestionRequest) Reset() {
	*x = ListQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionRequest) ProtoMessage() {}

func (x *ListQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionRequest.ProtoReflect.Descriptor instead.
func (*ListQuestionRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{16}
}

type ListQuestionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*QuestionInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListQuestionReply) Reset() {
	*x = ListQuestionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListQuestionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQuestionReply) ProtoMessage() {}

func (x *ListQuestionReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQuestionReply.ProtoReflect.Descriptor instead.
func (*ListQuestionReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{17}
}

func (x *ListQuestionReply) GetData() []*QuestionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question        string       `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	Type            QuestionType `protobuf:"varint,2,opt,name=type,proto3,enum=questionnaire.v1.QuestionType" json:"type,omitempty"`
	QuestionnaireId int64        `protobuf:"varint,3,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
	Id              int64        `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpdateQuestionRequest) Reset() {
	*x = UpdateQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionRequest) ProtoMessage() {}

func (x *UpdateQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuestionRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateQuestionRequest) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *UpdateQuestionRequest) GetType() QuestionType {
	if x != nil {
		return x.Type
	}
	return QuestionType_UNSPECIFIED
}

func (x *UpdateQuestionRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

func (x *UpdateQuestionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateQuestionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateQuestionReply) Reset() {
	*x = UpdateQuestionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuestionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuestionReply) ProtoMessage() {}

func (x *UpdateQuestionReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuestionReply.ProtoReflect.Descriptor instead.
func (*UpdateQuestionReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateQuestionReply) GetData() *QuestionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteQuestionRequest) Reset() {
	*x = DeleteQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionRequest) ProtoMessage() {}

func (x *DeleteQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuestionRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteQuestionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteQuestionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *QuestionInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteQuestionReply) Reset() {
	*x = DeleteQuestionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuestionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuestionReply) ProtoMessage() {}

func (x *DeleteQuestionReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuestionReply.ProtoReflect.Descriptor instead.
func (*DeleteQuestionReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteQuestionReply) GetData() *QuestionInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type AnswerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerText      string `protobuf:"bytes,1,opt,name=answerText,proto3" json:"answerText,omitempty"`
	AnswerChoice    int64  `protobuf:"varint,2,opt,name=answerChoice,proto3" json:"answerChoice,omitempty"`
	QuestionnaireId int64  `protobuf:"varint,3,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
	QuestionId      int64  `protobuf:"varint,4,opt,name=questionId,proto3" json:"questionId,omitempty"`
	Id              int64  `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AnswerInfo) Reset() {
	*x = AnswerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerInfo) ProtoMessage() {}

func (x *AnswerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerInfo.ProtoReflect.Descriptor instead.
func (*AnswerInfo) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{22}
}

func (x *AnswerInfo) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *AnswerInfo) GetAnswerChoice() int64 {
	if x != nil {
		return x.AnswerChoice
	}
	return 0
}

func (x *AnswerInfo) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

func (x *AnswerInfo) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *AnswerInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SubmitAnswerSingleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerText      string `protobuf:"bytes,1,opt,name=answerText,proto3" json:"answerText,omitempty"`
	AnswerChoice    int64  `protobuf:"varint,2,opt,name=answerChoice,proto3" json:"answerChoice,omitempty"`
	QuestionnaireId int64  `protobuf:"varint,3,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
	QuestionId      int64  `protobuf:"varint,4,opt,name=questionId,proto3" json:"questionId,omitempty"`
}

func (x *SubmitAnswerSingleRequest) Reset() {
	*x = SubmitAnswerSingleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerSingleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerSingleRequest) ProtoMessage() {}

func (x *SubmitAnswerSingleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerSingleRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerSingleRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{23}
}

func (x *SubmitAnswerSingleRequest) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *SubmitAnswerSingleRequest) GetAnswerChoice() int64 {
	if x != nil {
		return x.AnswerChoice
	}
	return 0
}

func (x *SubmitAnswerSingleRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

func (x *SubmitAnswerSingleRequest) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

type SubmitAnswerSingleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AnswerInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubmitAnswerSingleReply) Reset() {
	*x = SubmitAnswerSingleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerSingleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerSingleReply) ProtoMessage() {}

func (x *SubmitAnswerSingleReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerSingleReply.ProtoReflect.Descriptor instead.
func (*SubmitAnswerSingleReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{24}
}

func (x *SubmitAnswerSingleReply) GetData() *AnswerInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type AnswerBulkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerText   string `protobuf:"bytes,1,opt,name=answerText,proto3" json:"answerText,omitempty"`
	AnswerChoice int64  `protobuf:"varint,2,opt,name=answerChoice,proto3" json:"answerChoice,omitempty"`
	QuestionId   int64  `protobuf:"varint,4,opt,name=questionId,proto3" json:"questionId,omitempty"`
}

func (x *AnswerBulkInfo) Reset() {
	*x = AnswerBulkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerBulkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerBulkInfo) ProtoMessage() {}

func (x *AnswerBulkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerBulkInfo.ProtoReflect.Descriptor instead.
func (*AnswerBulkInfo) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{25}
}

func (x *AnswerBulkInfo) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *AnswerBulkInfo) GetAnswerChoice() int64 {
	if x != nil {
		return x.AnswerChoice
	}
	return 0
}

func (x *AnswerBulkInfo) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

type SubmitAnswerBulkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerBulkInfo  []*AnswerBulkInfo `protobuf:"bytes,1,rep,name=answerBulkInfo,proto3" json:"answerBulkInfo,omitempty"`
	QuestionnaireId int64             `protobuf:"varint,2,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
}

func (x *SubmitAnswerBulkRequest) Reset() {
	*x = SubmitAnswerBulkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerBulkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerBulkRequest) ProtoMessage() {}

func (x *SubmitAnswerBulkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerBulkRequest.ProtoReflect.Descriptor instead.
func (*SubmitAnswerBulkRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{26}
}

func (x *SubmitAnswerBulkRequest) GetAnswerBulkInfo() []*AnswerBulkInfo {
	if x != nil {
		return x.AnswerBulkInfo
	}
	return nil
}

func (x *SubmitAnswerBulkRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

type SubmitAnswerBulkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AnswerInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SubmitAnswerBulkReply) Reset() {
	*x = SubmitAnswerBulkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitAnswerBulkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitAnswerBulkReply) ProtoMessage() {}

func (x *SubmitAnswerBulkReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitAnswerBulkReply.ProtoReflect.Descriptor instead.
func (*SubmitAnswerBulkReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{27}
}

func (x *SubmitAnswerBulkReply) GetData() []*AnswerInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAnswerWithQuestionnaireIdAndQuestionIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionnaireId int64 `protobuf:"varint,1,opt,name=questionnaireId,proto3" json:"questionnaireId,omitempty"`
	QuestionId      int64 `protobuf:"varint,2,opt,name=questionId,proto3" json:"questionId,omitempty"`
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdRequest) Reset() {
	*x = GetAnswerWithQuestionnaireIdAndQuestionIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerWithQuestionnaireIdAndQuestionIdRequest) ProtoMessage() {}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerWithQuestionnaireIdAndQuestionIdRequest.ProtoReflect.Descriptor instead.
func (*GetAnswerWithQuestionnaireIdAndQuestionIdRequest) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{28}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdRequest) GetQuestionnaireId() int64 {
	if x != nil {
		return x.QuestionnaireId
	}
	return 0
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdRequest) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

type GetAnswerWithQuestionnaireIdAndQuestionIdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionInfo *QuestionInfo `protobuf:"bytes,1,opt,name=questionInfo,proto3" json:"questionInfo,omitempty"`
	Data         []*AnswerData `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdInfo) Reset() {
	*x = GetAnswerWithQuestionnaireIdAndQuestionIdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerWithQuestionnaireIdAndQuestionIdInfo) ProtoMessage() {}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerWithQuestionnaireIdAndQuestionIdInfo.ProtoReflect.Descriptor instead.
func (*GetAnswerWithQuestionnaireIdAndQuestionIdInfo) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{29}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdInfo) GetQuestionInfo() *QuestionInfo {
	if x != nil {
		return x.QuestionInfo
	}
	return nil
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdInfo) GetData() []*AnswerData {
	if x != nil {
		return x.Data
	}
	return nil
}

type AnswerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnswerText   string `protobuf:"bytes,1,opt,name=answerText,proto3" json:"answerText,omitempty"`
	AnswerChoice int64  `protobuf:"varint,2,opt,name=answerChoice,proto3" json:"answerChoice,omitempty"`
}

func (x *AnswerData) Reset() {
	*x = AnswerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerData) ProtoMessage() {}

func (x *AnswerData) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerData.ProtoReflect.Descriptor instead.
func (*AnswerData) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{30}
}

func (x *AnswerData) GetAnswerText() string {
	if x != nil {
		return x.AnswerText
	}
	return ""
}

func (x *AnswerData) GetAnswerChoice() int64 {
	if x != nil {
		return x.AnswerChoice
	}
	return 0
}

type GetAnswerWithQuestionnaireIdAndQuestionIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetAnswerWithQuestionnaireIdAndQuestionIdInfo `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdReply) Reset() {
	*x = GetAnswerWithQuestionnaireIdAndQuestionIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAnswerWithQuestionnaireIdAndQuestionIdReply) ProtoMessage() {}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_questionnaire_v1_questionnaire_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAnswerWithQuestionnaireIdAndQuestionIdReply.ProtoReflect.Descriptor instead.
func (*GetAnswerWithQuestionnaireIdAndQuestionIdReply) Descriptor() ([]byte, []int) {
	return file_questionnaire_v1_questionnaire_proto_rawDescGZIP(), []int{31}
}

func (x *GetAnswerWithQuestionnaireIdAndQuestionIdReply) GetData() *GetAnswerWithQuestionnaireIdAndQuestionIdInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_questionnaire_v1_questionnaire_proto protoreflect.FileDescriptor

var file_questionnaire_v1_questionnaire_proto_rawDesc = []byte{
	0x0a, 0x24, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x6a, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x53, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x53, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x15, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa1, 0x01, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x49, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xaa, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a,
	0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x74, 0x0a, 0x0e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x15, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa5, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x0a,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x53, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x35, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x32, 0x84, 0x12,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12,
	0xaa, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x39, 0x92, 0x41, 0x1d, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x97, 0xae,
	0xe5, 0x8d, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0xb1, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x12, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x49, 0x92, 0x41, 0x2b, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x1a, 0x1a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe9, 0x97, 0xae, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9,
	0x97, 0xae, 0xe5, 0x8d, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xa7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x92, 0x41,
	0x23, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe9, 0x97,
	0xae, 0xe5, 0x8d, 0xb7, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x12, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3e, 0x92, 0x41,
	0x1d, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x1a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xae, 0xe5, 0x8d, 0xb7, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xac, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x12, 0x2c, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b,
	0x92, 0x41, 0x1d, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69,
	0x72, 0x65, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x97, 0xae, 0xe5, 0x8d, 0xb7,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f,
	0x92, 0x41, 0x18, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0xe5,
	0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0xa7, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4d, 0x92, 0x41, 0x26, 0x0a,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0xe6, 0xa0, 0xb9, 0xe6, 0x8d,
	0xae, 0xe9, 0x97, 0xae, 0xe5, 0x8d, 0xb7, 0x69, 0x64, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe9,
	0x97, 0xae, 0xe9, 0xa2, 0x98, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x7b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x7d, 0x2f,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x92, 0x41, 0x1e, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x89, 0x80,
	0xe6, 0x9c, 0x89, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12,
	0x0a, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34,
	0x92, 0x41, 0x18, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31, 0x92, 0x41, 0x18, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe9, 0x97,
	0xae, 0xe9, 0xa2, 0x98, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xbe, 0x01, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x56, 0x92, 0x41, 0x22, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x1a, 0x18, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xaa, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe6, 0x8f,
	0x90, 0xe4, 0xba, 0xa4, 0xe7, 0xad, 0x94, 0xe6, 0xa1, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2f, 0x7b, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x7d, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x12, 0xab, 0x01, 0x0a, 0x10,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b,
	0x12, 0x29, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x42, 0x75, 0x6c, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x42, 0x75, 0x6c, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x43, 0x92, 0x41, 0x1c, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x1a, 0x12, 0xe6, 0x89, 0xb9, 0xe9, 0x87, 0x8f, 0xe6, 0x8f, 0x90, 0xe4, 0xba, 0xa4, 0xe7,
	0xad, 0x94, 0xe6, 0xa1, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x29, 0x47, 0x65,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x42, 0x2e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x65, 0x92,
	0x41, 0x34, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0x2a, 0xe6, 0x9f, 0xa5, 0xe7,
	0x9c, 0x8b, 0xe9, 0x97, 0xae, 0xe5, 0x8d, 0xb7, 0xe4, 0xb8, 0x8b, 0xe6, 0x9f, 0x90, 0xe4, 0xb8,
	0xaa, 0xe9, 0x97, 0xae, 0xe9, 0xa2, 0x98, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89,
	0xe7, 0xad, 0x94, 0xe6, 0xa1, 0x88, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x7b,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x7d,
	0x2f, 0x7b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x7d, 0x2f, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x42, 0x27, 0x5a, 0x25, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_questionnaire_v1_questionnaire_proto_rawDescOnce sync.Once
	file_questionnaire_v1_questionnaire_proto_rawDescData = file_questionnaire_v1_questionnaire_proto_rawDesc
)

func file_questionnaire_v1_questionnaire_proto_rawDescGZIP() []byte {
	file_questionnaire_v1_questionnaire_proto_rawDescOnce.Do(func() {
		file_questionnaire_v1_questionnaire_proto_rawDescData = protoimpl.X.CompressGZIP(file_questionnaire_v1_questionnaire_proto_rawDescData)
	})
	return file_questionnaire_v1_questionnaire_proto_rawDescData
}

var file_questionnaire_v1_questionnaire_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_questionnaire_v1_questionnaire_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_questionnaire_v1_questionnaire_proto_goTypes = []any{
	(QuestionType)(0),                                        // 0: questionnaire.v1.QuestionType
	(*QuestionnaireInfo)(nil),                                // 1: questionnaire.v1.QuestionnaireInfo
	(*CreateQuestionnaireRequest)(nil),                       // 2: questionnaire.v1.CreateQuestionnaireRequest
	(*CreateQuestionnaireReply)(nil),                         // 3: questionnaire.v1.CreateQuestionnaireReply
	(*GetQuestionnaireRequest)(nil),                          // 4: questionnaire.v1.GetQuestionnaireRequest
	(*GetQuestionnaireReply)(nil),                            // 5: questionnaire.v1.GetQuestionnaireReply
	(*ListQuestionnaireRequest)(nil),                         // 6: questionnaire.v1.ListQuestionnaireRequest
	(*ListQuestionnaireReply)(nil),                           // 7: questionnaire.v1.ListQuestionnaireReply
	(*UpdateQuestionnaireRequest)(nil),                       // 8: questionnaire.v1.UpdateQuestionnaireRequest
	(*UpdateQuestionnaireReply)(nil),                         // 9: questionnaire.v1.UpdateQuestionnaireReply
	(*DeleteQuestionnaireRequest)(nil),                       // 10: questionnaire.v1.DeleteQuestionnaireRequest
	(*DeleteQuestionnaireReply)(nil),                         // 11: questionnaire.v1.DeleteQuestionnaireReply
	(*QuestionInfo)(nil),                                     // 12: questionnaire.v1.QuestionInfo
	(*CreateQuestionRequest)(nil),                            // 13: questionnaire.v1.CreateQuestionRequest
	(*CreateQuestionReply)(nil),                              // 14: questionnaire.v1.CreateQuestionReply
	(*GetQuestionRequest)(nil),                               // 15: questionnaire.v1.GetQuestionRequest
	(*GetQuestionReply)(nil),                                 // 16: questionnaire.v1.GetQuestionReply
	(*ListQuestionRequest)(nil),                              // 17: questionnaire.v1.ListQuestionRequest
	(*ListQuestionReply)(nil),                                // 18: questionnaire.v1.ListQuestionReply
	(*UpdateQuestionRequest)(nil),                            // 19: questionnaire.v1.UpdateQuestionRequest
	(*UpdateQuestionReply)(nil),                              // 20: questionnaire.v1.UpdateQuestionReply
	(*DeleteQuestionRequest)(nil),                            // 21: questionnaire.v1.DeleteQuestionRequest
	(*DeleteQuestionReply)(nil),                              // 22: questionnaire.v1.DeleteQuestionReply
	(*AnswerInfo)(nil),                                       // 23: questionnaire.v1.AnswerInfo
	(*SubmitAnswerSingleRequest)(nil),                        // 24: questionnaire.v1.SubmitAnswerSingleRequest
	(*SubmitAnswerSingleReply)(nil),                          // 25: questionnaire.v1.SubmitAnswerSingleReply
	(*AnswerBulkInfo)(nil),                                   // 26: questionnaire.v1.AnswerBulkInfo
	(*SubmitAnswerBulkRequest)(nil),                          // 27: questionnaire.v1.SubmitAnswerBulkRequest
	(*SubmitAnswerBulkReply)(nil),                            // 28: questionnaire.v1.SubmitAnswerBulkReply
	(*GetAnswerWithQuestionnaireIdAndQuestionIdRequest)(nil), // 29: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdRequest
	(*GetAnswerWithQuestionnaireIdAndQuestionIdInfo)(nil),    // 30: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdInfo
	(*AnswerData)(nil),                                       // 31: questionnaire.v1.AnswerData
	(*GetAnswerWithQuestionnaireIdAndQuestionIdReply)(nil),   // 32: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdReply
}
var file_questionnaire_v1_questionnaire_proto_depIdxs = []int32{
	1,  // 0: questionnaire.v1.CreateQuestionnaireReply.data:type_name -> questionnaire.v1.QuestionnaireInfo
	1,  // 1: questionnaire.v1.GetQuestionnaireReply.data:type_name -> questionnaire.v1.QuestionnaireInfo
	1,  // 2: questionnaire.v1.ListQuestionnaireReply.data:type_name -> questionnaire.v1.QuestionnaireInfo
	1,  // 3: questionnaire.v1.UpdateQuestionnaireReply.data:type_name -> questionnaire.v1.QuestionnaireInfo
	1,  // 4: questionnaire.v1.DeleteQuestionnaireReply.data:type_name -> questionnaire.v1.QuestionnaireInfo
	0,  // 5: questionnaire.v1.QuestionInfo.type:type_name -> questionnaire.v1.QuestionType
	0,  // 6: questionnaire.v1.CreateQuestionRequest.type:type_name -> questionnaire.v1.QuestionType
	12, // 7: questionnaire.v1.CreateQuestionReply.data:type_name -> questionnaire.v1.QuestionInfo
	12, // 8: questionnaire.v1.GetQuestionReply.data:type_name -> questionnaire.v1.QuestionInfo
	12, // 9: questionnaire.v1.ListQuestionReply.data:type_name -> questionnaire.v1.QuestionInfo
	0,  // 10: questionnaire.v1.UpdateQuestionRequest.type:type_name -> questionnaire.v1.QuestionType
	12, // 11: questionnaire.v1.UpdateQuestionReply.data:type_name -> questionnaire.v1.QuestionInfo
	12, // 12: questionnaire.v1.DeleteQuestionReply.data:type_name -> questionnaire.v1.QuestionInfo
	23, // 13: questionnaire.v1.SubmitAnswerSingleReply.data:type_name -> questionnaire.v1.AnswerInfo
	26, // 14: questionnaire.v1.SubmitAnswerBulkRequest.answerBulkInfo:type_name -> questionnaire.v1.AnswerBulkInfo
	23, // 15: questionnaire.v1.SubmitAnswerBulkReply.data:type_name -> questionnaire.v1.AnswerInfo
	12, // 16: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdInfo.questionInfo:type_name -> questionnaire.v1.QuestionInfo
	31, // 17: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdInfo.data:type_name -> questionnaire.v1.AnswerData
	30, // 18: questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdReply.data:type_name -> questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdInfo
	2,  // 19: questionnaire.v1.Questionnaire.CreateQuestionnaire:input_type -> questionnaire.v1.CreateQuestionnaireRequest
	4,  // 20: questionnaire.v1.Questionnaire.GetQuestionnaire:input_type -> questionnaire.v1.GetQuestionnaireRequest
	6,  // 21: questionnaire.v1.Questionnaire.ListQuestionnaire:input_type -> questionnaire.v1.ListQuestionnaireRequest
	8,  // 22: questionnaire.v1.Questionnaire.UpdateQuestionnaire:input_type -> questionnaire.v1.UpdateQuestionnaireRequest
	10, // 23: questionnaire.v1.Questionnaire.DeleteQuestionnaire:input_type -> questionnaire.v1.DeleteQuestionnaireRequest
	13, // 24: questionnaire.v1.Questionnaire.CreateQuestion:input_type -> questionnaire.v1.CreateQuestionRequest
	15, // 25: questionnaire.v1.Questionnaire.GetQuestions:input_type -> questionnaire.v1.GetQuestionRequest
	17, // 26: questionnaire.v1.Questionnaire.ListQuestion:input_type -> questionnaire.v1.ListQuestionRequest
	19, // 27: questionnaire.v1.Questionnaire.UpdateQuestion:input_type -> questionnaire.v1.UpdateQuestionRequest
	21, // 28: questionnaire.v1.Questionnaire.DeleteQuestion:input_type -> questionnaire.v1.DeleteQuestionRequest
	24, // 29: questionnaire.v1.Questionnaire.SubmitAnswer:input_type -> questionnaire.v1.SubmitAnswerSingleRequest
	27, // 30: questionnaire.v1.Questionnaire.SubmitAnswerBulk:input_type -> questionnaire.v1.SubmitAnswerBulkRequest
	29, // 31: questionnaire.v1.Questionnaire.GetAnswerWithQuestionnaireIdAndQuestionId:input_type -> questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdRequest
	3,  // 32: questionnaire.v1.Questionnaire.CreateQuestionnaire:output_type -> questionnaire.v1.CreateQuestionnaireReply
	5,  // 33: questionnaire.v1.Questionnaire.GetQuestionnaire:output_type -> questionnaire.v1.GetQuestionnaireReply
	7,  // 34: questionnaire.v1.Questionnaire.ListQuestionnaire:output_type -> questionnaire.v1.ListQuestionnaireReply
	9,  // 35: questionnaire.v1.Questionnaire.UpdateQuestionnaire:output_type -> questionnaire.v1.UpdateQuestionnaireReply
	11, // 36: questionnaire.v1.Questionnaire.DeleteQuestionnaire:output_type -> questionnaire.v1.DeleteQuestionnaireReply
	14, // 37: questionnaire.v1.Questionnaire.CreateQuestion:output_type -> questionnaire.v1.CreateQuestionReply
	16, // 38: questionnaire.v1.Questionnaire.GetQuestions:output_type -> questionnaire.v1.GetQuestionReply
	18, // 39: questionnaire.v1.Questionnaire.ListQuestion:output_type -> questionnaire.v1.ListQuestionReply
	20, // 40: questionnaire.v1.Questionnaire.UpdateQuestion:output_type -> questionnaire.v1.UpdateQuestionReply
	22, // 41: questionnaire.v1.Questionnaire.DeleteQuestion:output_type -> questionnaire.v1.DeleteQuestionReply
	25, // 42: questionnaire.v1.Questionnaire.SubmitAnswer:output_type -> questionnaire.v1.SubmitAnswerSingleReply
	28, // 43: questionnaire.v1.Questionnaire.SubmitAnswerBulk:output_type -> questionnaire.v1.SubmitAnswerBulkReply
	32, // 44: questionnaire.v1.Questionnaire.GetAnswerWithQuestionnaireIdAndQuestionId:output_type -> questionnaire.v1.GetAnswerWithQuestionnaireIdAndQuestionIdReply
	32, // [32:45] is the sub-list for method output_type
	19, // [19:32] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_questionnaire_v1_questionnaire_proto_init() }
func file_questionnaire_v1_questionnaire_proto_init() {
	if File_questionnaire_v1_questionnaire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_questionnaire_v1_questionnaire_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*QuestionnaireInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionnaireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionnaireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListQuestionnaireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionnaireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteQuestionnaireRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteQuestionnaireReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*QuestionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateQuestionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetQuestionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ListQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ListQuestionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateQuestionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteQuestionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*AnswerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitAnswerSingleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitAnswerSingleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AnswerBulkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitAnswerBulkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitAnswerBulkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetAnswerWithQuestionnaireIdAndQuestionIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetAnswerWithQuestionnaireIdAndQuestionIdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AnswerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_questionnaire_v1_questionnaire_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GetAnswerWithQuestionnaireIdAndQuestionIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_questionnaire_v1_questionnaire_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_questionnaire_v1_questionnaire_proto_goTypes,
		DependencyIndexes: file_questionnaire_v1_questionnaire_proto_depIdxs,
		EnumInfos:         file_questionnaire_v1_questionnaire_proto_enumTypes,
		MessageInfos:      file_questionnaire_v1_questionnaire_proto_msgTypes,
	}.Build()
	File_questionnaire_v1_questionnaire_proto = out.File
	file_questionnaire_v1_questionnaire_proto_rawDesc = nil
	file_questionnaire_v1_questionnaire_proto_goTypes = nil
	file_questionnaire_v1_questionnaire_proto_depIdxs = nil
}
