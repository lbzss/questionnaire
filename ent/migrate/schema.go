// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "answer_choice", Type: field.TypeInt},
		{Name: "answer_text", Type: field.TypeString},
		{Name: "questionnaire_id", Type: field.TypeInt64},
		{Name: "question_id", Type: field.TypeInt64},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "question", Type: field.TypeString},
		{Name: "type", Type: field.TypeInt},
		{Name: "questionnaire_id", Type: field.TypeInt64},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
	}
	// QuestionnairesColumns holds the columns for the "questionnaires" table.
	QuestionnairesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "object", Type: field.TypeString},
		{Name: "anonymous", Type: field.TypeInt, Default: 2},
		{Name: "user_create", Type: field.TypeInt, Nullable: true},
	}
	// QuestionnairesTable holds the schema information for the "questionnaires" table.
	QuestionnairesTable = &schema.Table{
		Name:       "questionnaires",
		Columns:    QuestionnairesColumns,
		PrimaryKey: []*schema.Column{QuestionnairesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questionnaires_users_create",
				Columns:    []*schema.Column{QuestionnairesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "user_name", Type: field.TypeString},
		{Name: "gender", Type: field.TypeInt, Default: 1},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "user_type", Type: field.TypeInt, Default: 2},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// QuestionOwnColumns holds the columns for the "question_own" table.
	QuestionOwnColumns = []*schema.Column{
		{Name: "question_id", Type: field.TypeInt},
		{Name: "answer_id", Type: field.TypeInt},
	}
	// QuestionOwnTable holds the schema information for the "question_own" table.
	QuestionOwnTable = &schema.Table{
		Name:       "question_own",
		Columns:    QuestionOwnColumns,
		PrimaryKey: []*schema.Column{QuestionOwnColumns[0], QuestionOwnColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "question_own_question_id",
				Columns:    []*schema.Column{QuestionOwnColumns[0]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "question_own_answer_id",
				Columns:    []*schema.Column{QuestionOwnColumns[1]},
				RefColumns: []*schema.Column{AnswersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// QuestionnaireIncludeColumns holds the columns for the "questionnaire_include" table.
	QuestionnaireIncludeColumns = []*schema.Column{
		{Name: "questionnaire_id", Type: field.TypeInt},
		{Name: "question_id", Type: field.TypeInt},
	}
	// QuestionnaireIncludeTable holds the schema information for the "questionnaire_include" table.
	QuestionnaireIncludeTable = &schema.Table{
		Name:       "questionnaire_include",
		Columns:    QuestionnaireIncludeColumns,
		PrimaryKey: []*schema.Column{QuestionnaireIncludeColumns[0], QuestionnaireIncludeColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "questionnaire_include_questionnaire_id",
				Columns:    []*schema.Column{QuestionnaireIncludeColumns[0]},
				RefColumns: []*schema.Column{QuestionnairesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "questionnaire_include_question_id",
				Columns:    []*schema.Column{QuestionnaireIncludeColumns[1]},
				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AnswersTable,
		QuestionsTable,
		QuestionnairesTable,
		UsersTable,
		QuestionOwnTable,
		QuestionnaireIncludeTable,
	}
)

func init() {
	QuestionnairesTable.ForeignKeys[0].RefTable = UsersTable
	QuestionOwnTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionOwnTable.ForeignKeys[1].RefTable = AnswersTable
	QuestionnaireIncludeTable.ForeignKeys[0].RefTable = QuestionnairesTable
	QuestionnaireIncludeTable.ForeignKeys[1].RefTable = QuestionsTable
}
