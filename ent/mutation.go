// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"questionnaire/ent/answer"
	"questionnaire/ent/predicate"
	"questionnaire/ent/question"
	"questionnaire/ent/questionnaire"
	"questionnaire/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer        = "Answer"
	TypeQuestion      = "Question"
	TypeQuestionnaire = "Questionnaire"
	TypeUser          = "User"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	updated_at          *time.Time
	answer_choice       *int
	addanswer_choice    *int
	answer_text         *string
	questionnaire_id    *int64
	addquestionnaire_id *int64
	question_id         *int64
	addquestion_id      *int64
	clearedFields       map[string]struct{}
	question            map[int]struct{}
	removedquestion     map[int]struct{}
	clearedquestion     bool
	done                bool
	oldValue            func(context.Context) (*Answer, error)
	predicates          []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id int) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnswerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Answer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAnswerChoice sets the "answer_choice" field.
func (m *AnswerMutation) SetAnswerChoice(i int) {
	m.answer_choice = &i
	m.addanswer_choice = nil
}

// AnswerChoice returns the value of the "answer_choice" field in the mutation.
func (m *AnswerMutation) AnswerChoice() (r int, exists bool) {
	v := m.answer_choice
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswerChoice returns the old "answer_choice" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldAnswerChoice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswerChoice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswerChoice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswerChoice: %w", err)
	}
	return oldValue.AnswerChoice, nil
}

// AddAnswerChoice adds i to the "answer_choice" field.
func (m *AnswerMutation) AddAnswerChoice(i int) {
	if m.addanswer_choice != nil {
		*m.addanswer_choice += i
	} else {
		m.addanswer_choice = &i
	}
}

// AddedAnswerChoice returns the value that was added to the "answer_choice" field in this mutation.
func (m *AnswerMutation) AddedAnswerChoice() (r int, exists bool) {
	v := m.addanswer_choice
	if v == nil {
		return
	}
	return *v, true
}

// ResetAnswerChoice resets all changes to the "answer_choice" field.
func (m *AnswerMutation) ResetAnswerChoice() {
	m.answer_choice = nil
	m.addanswer_choice = nil
}

// SetAnswerText sets the "answer_text" field.
func (m *AnswerMutation) SetAnswerText(s string) {
	m.answer_text = &s
}

// AnswerText returns the value of the "answer_text" field in the mutation.
func (m *AnswerMutation) AnswerText() (r string, exists bool) {
	v := m.answer_text
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswerText returns the old "answer_text" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldAnswerText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswerText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswerText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswerText: %w", err)
	}
	return oldValue.AnswerText, nil
}

// ResetAnswerText resets all changes to the "answer_text" field.
func (m *AnswerMutation) ResetAnswerText() {
	m.answer_text = nil
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (m *AnswerMutation) SetQuestionnaireID(i int64) {
	m.questionnaire_id = &i
	m.addquestionnaire_id = nil
}

// QuestionnaireID returns the value of the "questionnaire_id" field in the mutation.
func (m *AnswerMutation) QuestionnaireID() (r int64, exists bool) {
	v := m.questionnaire_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionnaireID returns the old "questionnaire_id" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldQuestionnaireID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestionnaireID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestionnaireID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionnaireID: %w", err)
	}
	return oldValue.QuestionnaireID, nil
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (m *AnswerMutation) AddQuestionnaireID(i int64) {
	if m.addquestionnaire_id != nil {
		*m.addquestionnaire_id += i
	} else {
		m.addquestionnaire_id = &i
	}
}

// AddedQuestionnaireID returns the value that was added to the "questionnaire_id" field in this mutation.
func (m *AnswerMutation) AddedQuestionnaireID() (r int64, exists bool) {
	v := m.addquestionnaire_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuestionnaireID resets all changes to the "questionnaire_id" field.
func (m *AnswerMutation) ResetQuestionnaireID() {
	m.questionnaire_id = nil
	m.addquestionnaire_id = nil
}

// SetQuestionID sets the "question_id" field.
func (m *AnswerMutation) SetQuestionID(i int64) {
	m.question_id = &i
	m.addquestion_id = nil
}

// QuestionID returns the value of the "question_id" field in the mutation.
func (m *AnswerMutation) QuestionID() (r int64, exists bool) {
	v := m.question_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionID returns the old "question_id" field's value of the Answer entity.
// If the Answer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerMutation) OldQuestionID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionID: %w", err)
	}
	return oldValue.QuestionID, nil
}

// AddQuestionID adds i to the "question_id" field.
func (m *AnswerMutation) AddQuestionID(i int64) {
	if m.addquestion_id != nil {
		*m.addquestion_id += i
	} else {
		m.addquestion_id = &i
	}
}

// AddedQuestionID returns the value that was added to the "question_id" field in this mutation.
func (m *AnswerMutation) AddedQuestionID() (r int64, exists bool) {
	v := m.addquestion_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuestionID resets all changes to the "question_id" field.
func (m *AnswerMutation) ResetQuestionID() {
	m.question_id = nil
	m.addquestion_id = nil
}

// AddQuestionIDs adds the "question" edge to the Question entity by ids.
func (m *AnswerMutation) AddQuestionIDs(ids ...int) {
	if m.question == nil {
		m.question = make(map[int]struct{})
	}
	for i := range ids {
		m.question[ids[i]] = struct{}{}
	}
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *AnswerMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *AnswerMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// RemoveQuestionIDs removes the "question" edge to the Question entity by IDs.
func (m *AnswerMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestion == nil {
		m.removedquestion = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question, ids[i])
		m.removedquestion[ids[i]] = struct{}{}
	}
}

// RemovedQuestion returns the removed IDs of the "question" edge to the Question entity.
func (m *AnswerMutation) RemovedQuestionIDs() (ids []int) {
	for id := range m.removedquestion {
		ids = append(ids, id)
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
func (m *AnswerMutation) QuestionIDs() (ids []int) {
	for id := range m.question {
		ids = append(ids, id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *AnswerMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
	m.removedquestion = nil
}

// Where appends a list predicates to the AnswerMutation builder.
func (m *AnswerMutation) Where(ps ...predicate.Answer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Answer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, answer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, answer.FieldUpdatedAt)
	}
	if m.answer_choice != nil {
		fields = append(fields, answer.FieldAnswerChoice)
	}
	if m.answer_text != nil {
		fields = append(fields, answer.FieldAnswerText)
	}
	if m.questionnaire_id != nil {
		fields = append(fields, answer.FieldQuestionnaireID)
	}
	if m.question_id != nil {
		fields = append(fields, answer.FieldQuestionID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldCreatedAt:
		return m.CreatedAt()
	case answer.FieldUpdatedAt:
		return m.UpdatedAt()
	case answer.FieldAnswerChoice:
		return m.AnswerChoice()
	case answer.FieldAnswerText:
		return m.AnswerText()
	case answer.FieldQuestionnaireID:
		return m.QuestionnaireID()
	case answer.FieldQuestionID:
		return m.QuestionID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case answer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case answer.FieldAnswerChoice:
		return m.OldAnswerChoice(ctx)
	case answer.FieldAnswerText:
		return m.OldAnswerText(ctx)
	case answer.FieldQuestionnaireID:
		return m.OldQuestionnaireID(ctx)
	case answer.FieldQuestionID:
		return m.OldQuestionID(ctx)
	}
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case answer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case answer.FieldAnswerChoice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswerChoice(v)
		return nil
	case answer.FieldAnswerText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswerText(v)
		return nil
	case answer.FieldQuestionnaireID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionnaireID(v)
		return nil
	case answer.FieldQuestionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionID(v)
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	var fields []string
	if m.addanswer_choice != nil {
		fields = append(fields, answer.FieldAnswerChoice)
	}
	if m.addquestionnaire_id != nil {
		fields = append(fields, answer.FieldQuestionnaireID)
	}
	if m.addquestion_id != nil {
		fields = append(fields, answer.FieldQuestionID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case answer.FieldAnswerChoice:
		return m.AddedAnswerChoice()
	case answer.FieldQuestionnaireID:
		return m.AddedQuestionnaireID()
	case answer.FieldQuestionID:
		return m.AddedQuestionID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case answer.FieldAnswerChoice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnswerChoice(v)
		return nil
	case answer.FieldQuestionnaireID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuestionnaireID(v)
		return nil
	case answer.FieldQuestionID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuestionID(v)
		return nil
	}
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	switch name {
	case answer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case answer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case answer.FieldAnswerChoice:
		m.ResetAnswerChoice()
		return nil
	case answer.FieldAnswerText:
		m.ResetAnswerText()
		return nil
	case answer.FieldQuestionnaireID:
		m.ResetQuestionnaireID()
		return nil
	case answer.FieldQuestionID:
		m.ResetQuestionID()
		return nil
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.question != nil {
		edges = append(edges, answer.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.question))
		for id := range m.question {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquestion != nil {
		edges = append(edges, answer.EdgeQuestion)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.removedquestion))
		for id := range m.removedquestion {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquestion {
		edges = append(edges, answer.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case answer.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	switch name {
	case answer.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown Answer edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	created_at          *time.Time
	updated_at          *time.Time
	question            *string
	_type               *int
	add_type            *int
	questionnaire_id    *int64
	addquestionnaire_id *int64
	clearedFields       map[string]struct{}
	own                 map[int]struct{}
	removedown          map[int]struct{}
	clearedown          bool
	included            map[int]struct{}
	removedincluded     map[int]struct{}
	clearedincluded     bool
	done                bool
	oldValue            func(context.Context) (*Question, error)
	predicates          []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id int) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetQuestion sets the "question" field.
func (m *QuestionMutation) SetQuestion(s string) {
	m.question = &s
}

// Question returns the value of the "question" field in the mutation.
func (m *QuestionMutation) Question() (r string, exists bool) {
	v := m.question
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestion returns the old "question" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldQuestion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestion: %w", err)
	}
	return oldValue.Question, nil
}

// ResetQuestion resets all changes to the "question" field.
func (m *QuestionMutation) ResetQuestion() {
	m.question = nil
}

// SetType sets the "type" field.
func (m *QuestionMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *QuestionMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *QuestionMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *QuestionMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *QuestionMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (m *QuestionMutation) SetQuestionnaireID(i int64) {
	m.questionnaire_id = &i
	m.addquestionnaire_id = nil
}

// QuestionnaireID returns the value of the "questionnaire_id" field in the mutation.
func (m *QuestionMutation) QuestionnaireID() (r int64, exists bool) {
	v := m.questionnaire_id
	if v == nil {
		return
	}
	return *v, true
}

// OldQuestionnaireID returns the old "questionnaire_id" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldQuestionnaireID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuestionnaireID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuestionnaireID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuestionnaireID: %w", err)
	}
	return oldValue.QuestionnaireID, nil
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (m *QuestionMutation) AddQuestionnaireID(i int64) {
	if m.addquestionnaire_id != nil {
		*m.addquestionnaire_id += i
	} else {
		m.addquestionnaire_id = &i
	}
}

// AddedQuestionnaireID returns the value that was added to the "questionnaire_id" field in this mutation.
func (m *QuestionMutation) AddedQuestionnaireID() (r int64, exists bool) {
	v := m.addquestionnaire_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuestionnaireID resets all changes to the "questionnaire_id" field.
func (m *QuestionMutation) ResetQuestionnaireID() {
	m.questionnaire_id = nil
	m.addquestionnaire_id = nil
}

// AddOwnIDs adds the "own" edge to the Answer entity by ids.
func (m *QuestionMutation) AddOwnIDs(ids ...int) {
	if m.own == nil {
		m.own = make(map[int]struct{})
	}
	for i := range ids {
		m.own[ids[i]] = struct{}{}
	}
}

// ClearOwn clears the "own" edge to the Answer entity.
func (m *QuestionMutation) ClearOwn() {
	m.clearedown = true
}

// OwnCleared reports if the "own" edge to the Answer entity was cleared.
func (m *QuestionMutation) OwnCleared() bool {
	return m.clearedown
}

// RemoveOwnIDs removes the "own" edge to the Answer entity by IDs.
func (m *QuestionMutation) RemoveOwnIDs(ids ...int) {
	if m.removedown == nil {
		m.removedown = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.own, ids[i])
		m.removedown[ids[i]] = struct{}{}
	}
}

// RemovedOwn returns the removed IDs of the "own" edge to the Answer entity.
func (m *QuestionMutation) RemovedOwnIDs() (ids []int) {
	for id := range m.removedown {
		ids = append(ids, id)
	}
	return
}

// OwnIDs returns the "own" edge IDs in the mutation.
func (m *QuestionMutation) OwnIDs() (ids []int) {
	for id := range m.own {
		ids = append(ids, id)
	}
	return
}

// ResetOwn resets all changes to the "own" edge.
func (m *QuestionMutation) ResetOwn() {
	m.own = nil
	m.clearedown = false
	m.removedown = nil
}

// AddIncludedIDs adds the "included" edge to the Questionnaire entity by ids.
func (m *QuestionMutation) AddIncludedIDs(ids ...int) {
	if m.included == nil {
		m.included = make(map[int]struct{})
	}
	for i := range ids {
		m.included[ids[i]] = struct{}{}
	}
}

// ClearIncluded clears the "included" edge to the Questionnaire entity.
func (m *QuestionMutation) ClearIncluded() {
	m.clearedincluded = true
}

// IncludedCleared reports if the "included" edge to the Questionnaire entity was cleared.
func (m *QuestionMutation) IncludedCleared() bool {
	return m.clearedincluded
}

// RemoveIncludedIDs removes the "included" edge to the Questionnaire entity by IDs.
func (m *QuestionMutation) RemoveIncludedIDs(ids ...int) {
	if m.removedincluded == nil {
		m.removedincluded = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.included, ids[i])
		m.removedincluded[ids[i]] = struct{}{}
	}
}

// RemovedIncluded returns the removed IDs of the "included" edge to the Questionnaire entity.
func (m *QuestionMutation) RemovedIncludedIDs() (ids []int) {
	for id := range m.removedincluded {
		ids = append(ids, id)
	}
	return
}

// IncludedIDs returns the "included" edge IDs in the mutation.
func (m *QuestionMutation) IncludedIDs() (ids []int) {
	for id := range m.included {
		ids = append(ids, id)
	}
	return
}

// ResetIncluded resets all changes to the "included" edge.
func (m *QuestionMutation) ResetIncluded() {
	m.included = nil
	m.clearedincluded = false
	m.removedincluded = nil
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, question.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, question.FieldUpdatedAt)
	}
	if m.question != nil {
		fields = append(fields, question.FieldQuestion)
	}
	if m._type != nil {
		fields = append(fields, question.FieldType)
	}
	if m.questionnaire_id != nil {
		fields = append(fields, question.FieldQuestionnaireID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldCreatedAt:
		return m.CreatedAt()
	case question.FieldUpdatedAt:
		return m.UpdatedAt()
	case question.FieldQuestion:
		return m.Question()
	case question.FieldType:
		return m.GetType()
	case question.FieldQuestionnaireID:
		return m.QuestionnaireID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case question.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case question.FieldQuestion:
		return m.OldQuestion(ctx)
	case question.FieldType:
		return m.OldType(ctx)
	case question.FieldQuestionnaireID:
		return m.OldQuestionnaireID(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case question.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case question.FieldQuestion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestion(v)
		return nil
	case question.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case question.FieldQuestionnaireID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuestionnaireID(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, question.FieldType)
	}
	if m.addquestionnaire_id != nil {
		fields = append(fields, question.FieldQuestionnaireID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldType:
		return m.AddedType()
	case question.FieldQuestionnaireID:
		return m.AddedQuestionnaireID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case question.FieldQuestionnaireID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuestionnaireID(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case question.FieldQuestion:
		m.ResetQuestion()
		return nil
	case question.FieldType:
		m.ResetType()
		return nil
	case question.FieldQuestionnaireID:
		m.ResetQuestionnaireID()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.own != nil {
		edges = append(edges, question.EdgeOwn)
	}
	if m.included != nil {
		edges = append(edges, question.EdgeIncluded)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeOwn:
		ids := make([]ent.Value, 0, len(m.own))
		for id := range m.own {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeIncluded:
		ids := make([]ent.Value, 0, len(m.included))
		for id := range m.included {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedown != nil {
		edges = append(edges, question.EdgeOwn)
	}
	if m.removedincluded != nil {
		edges = append(edges, question.EdgeIncluded)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeOwn:
		ids := make([]ent.Value, 0, len(m.removedown))
		for id := range m.removedown {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeIncluded:
		ids := make([]ent.Value, 0, len(m.removedincluded))
		for id := range m.removedincluded {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedown {
		edges = append(edges, question.EdgeOwn)
	}
	if m.clearedincluded {
		edges = append(edges, question.EdgeIncluded)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeOwn:
		return m.clearedown
	case question.EdgeIncluded:
		return m.clearedincluded
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeOwn:
		m.ResetOwn()
		return nil
	case question.EdgeIncluded:
		m.ResetIncluded()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionnaireMutation represents an operation that mutates the Questionnaire nodes in the graph.
type QuestionnaireMutation struct {
	config
	op                Op
	typ               string
	id                *int
	created_at        *time.Time
	updated_at        *time.Time
	name              *string
	description       *string
	object            *string
	anonymous         *int
	addanonymous      *int
	clearedFields     map[string]struct{}
	include           map[int]struct{}
	removedinclude    map[int]struct{}
	clearedinclude    bool
	created_by        *int
	clearedcreated_by bool
	done              bool
	oldValue          func(context.Context) (*Questionnaire, error)
	predicates        []predicate.Questionnaire
}

var _ ent.Mutation = (*QuestionnaireMutation)(nil)

// questionnaireOption allows management of the mutation configuration using functional options.
type questionnaireOption func(*QuestionnaireMutation)

// newQuestionnaireMutation creates new mutation for the Questionnaire entity.
func newQuestionnaireMutation(c config, op Op, opts ...questionnaireOption) *QuestionnaireMutation {
	m := &QuestionnaireMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionnaire,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionnaireID sets the ID field of the mutation.
func withQuestionnaireID(id int) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		var (
			err   error
			once  sync.Once
			value *Questionnaire
		)
		m.oldValue = func(ctx context.Context) (*Questionnaire, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Questionnaire.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionnaire sets the old Questionnaire of the mutation.
func withQuestionnaire(node *Questionnaire) questionnaireOption {
	return func(m *QuestionnaireMutation) {
		m.oldValue = func(context.Context) (*Questionnaire, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionnaireMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionnaireMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionnaireMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionnaireMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Questionnaire.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionnaireMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionnaireMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionnaireMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionnaireMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionnaireMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionnaireMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *QuestionnaireMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuestionnaireMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuestionnaireMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *QuestionnaireMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QuestionnaireMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *QuestionnaireMutation) ResetDescription() {
	m.description = nil
}

// SetObject sets the "object" field.
func (m *QuestionnaireMutation) SetObject(s string) {
	m.object = &s
}

// Object returns the value of the "object" field in the mutation.
func (m *QuestionnaireMutation) Object() (r string, exists bool) {
	v := m.object
	if v == nil {
		return
	}
	return *v, true
}

// OldObject returns the old "object" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldObject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldObject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldObject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldObject: %w", err)
	}
	return oldValue.Object, nil
}

// ResetObject resets all changes to the "object" field.
func (m *QuestionnaireMutation) ResetObject() {
	m.object = nil
}

// SetAnonymous sets the "anonymous" field.
func (m *QuestionnaireMutation) SetAnonymous(i int) {
	m.anonymous = &i
	m.addanonymous = nil
}

// Anonymous returns the value of the "anonymous" field in the mutation.
func (m *QuestionnaireMutation) Anonymous() (r int, exists bool) {
	v := m.anonymous
	if v == nil {
		return
	}
	return *v, true
}

// OldAnonymous returns the old "anonymous" field's value of the Questionnaire entity.
// If the Questionnaire object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionnaireMutation) OldAnonymous(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnonymous is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnonymous requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnonymous: %w", err)
	}
	return oldValue.Anonymous, nil
}

// AddAnonymous adds i to the "anonymous" field.
func (m *QuestionnaireMutation) AddAnonymous(i int) {
	if m.addanonymous != nil {
		*m.addanonymous += i
	} else {
		m.addanonymous = &i
	}
}

// AddedAnonymous returns the value that was added to the "anonymous" field in this mutation.
func (m *QuestionnaireMutation) AddedAnonymous() (r int, exists bool) {
	v := m.addanonymous
	if v == nil {
		return
	}
	return *v, true
}

// ResetAnonymous resets all changes to the "anonymous" field.
func (m *QuestionnaireMutation) ResetAnonymous() {
	m.anonymous = nil
	m.addanonymous = nil
}

// AddIncludeIDs adds the "include" edge to the Question entity by ids.
func (m *QuestionnaireMutation) AddIncludeIDs(ids ...int) {
	if m.include == nil {
		m.include = make(map[int]struct{})
	}
	for i := range ids {
		m.include[ids[i]] = struct{}{}
	}
}

// ClearInclude clears the "include" edge to the Question entity.
func (m *QuestionnaireMutation) ClearInclude() {
	m.clearedinclude = true
}

// IncludeCleared reports if the "include" edge to the Question entity was cleared.
func (m *QuestionnaireMutation) IncludeCleared() bool {
	return m.clearedinclude
}

// RemoveIncludeIDs removes the "include" edge to the Question entity by IDs.
func (m *QuestionnaireMutation) RemoveIncludeIDs(ids ...int) {
	if m.removedinclude == nil {
		m.removedinclude = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.include, ids[i])
		m.removedinclude[ids[i]] = struct{}{}
	}
}

// RemovedInclude returns the removed IDs of the "include" edge to the Question entity.
func (m *QuestionnaireMutation) RemovedIncludeIDs() (ids []int) {
	for id := range m.removedinclude {
		ids = append(ids, id)
	}
	return
}

// IncludeIDs returns the "include" edge IDs in the mutation.
func (m *QuestionnaireMutation) IncludeIDs() (ids []int) {
	for id := range m.include {
		ids = append(ids, id)
	}
	return
}

// ResetInclude resets all changes to the "include" edge.
func (m *QuestionnaireMutation) ResetInclude() {
	m.include = nil
	m.clearedinclude = false
	m.removedinclude = nil
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *QuestionnaireMutation) SetCreatedByID(id int) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *QuestionnaireMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *QuestionnaireMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *QuestionnaireMutation) CreatedByID() (id int, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *QuestionnaireMutation) CreatedByIDs() (ids []int) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *QuestionnaireMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// Where appends a list predicates to the QuestionnaireMutation builder.
func (m *QuestionnaireMutation) Where(ps ...predicate.Questionnaire) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionnaireMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionnaireMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Questionnaire, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionnaireMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionnaireMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Questionnaire).
func (m *QuestionnaireMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionnaireMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, questionnaire.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, questionnaire.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, questionnaire.FieldName)
	}
	if m.description != nil {
		fields = append(fields, questionnaire.FieldDescription)
	}
	if m.object != nil {
		fields = append(fields, questionnaire.FieldObject)
	}
	if m.anonymous != nil {
		fields = append(fields, questionnaire.FieldAnonymous)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionnaireMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionnaire.FieldCreatedAt:
		return m.CreatedAt()
	case questionnaire.FieldUpdatedAt:
		return m.UpdatedAt()
	case questionnaire.FieldName:
		return m.Name()
	case questionnaire.FieldDescription:
		return m.Description()
	case questionnaire.FieldObject:
		return m.Object()
	case questionnaire.FieldAnonymous:
		return m.Anonymous()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionnaireMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionnaire.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case questionnaire.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case questionnaire.FieldName:
		return m.OldName(ctx)
	case questionnaire.FieldDescription:
		return m.OldDescription(ctx)
	case questionnaire.FieldObject:
		return m.OldObject(ctx)
	case questionnaire.FieldAnonymous:
		return m.OldAnonymous(ctx)
	}
	return nil, fmt.Errorf("unknown Questionnaire field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionnaire.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case questionnaire.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case questionnaire.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case questionnaire.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case questionnaire.FieldObject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetObject(v)
		return nil
	case questionnaire.FieldAnonymous:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnonymous(v)
		return nil
	}
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionnaireMutation) AddedFields() []string {
	var fields []string
	if m.addanonymous != nil {
		fields = append(fields, questionnaire.FieldAnonymous)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionnaireMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case questionnaire.FieldAnonymous:
		return m.AddedAnonymous()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionnaireMutation) AddField(name string, value ent.Value) error {
	switch name {
	case questionnaire.FieldAnonymous:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnonymous(v)
		return nil
	}
	return fmt.Errorf("unknown Questionnaire numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionnaireMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionnaireMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Questionnaire nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionnaireMutation) ResetField(name string) error {
	switch name {
	case questionnaire.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case questionnaire.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case questionnaire.FieldName:
		m.ResetName()
		return nil
	case questionnaire.FieldDescription:
		m.ResetDescription()
		return nil
	case questionnaire.FieldObject:
		m.ResetObject()
		return nil
	case questionnaire.FieldAnonymous:
		m.ResetAnonymous()
		return nil
	}
	return fmt.Errorf("unknown Questionnaire field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionnaireMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.include != nil {
		edges = append(edges, questionnaire.EdgeInclude)
	}
	if m.created_by != nil {
		edges = append(edges, questionnaire.EdgeCreatedBy)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionnaireMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questionnaire.EdgeInclude:
		ids := make([]ent.Value, 0, len(m.include))
		for id := range m.include {
			ids = append(ids, id)
		}
		return ids
	case questionnaire.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionnaireMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedinclude != nil {
		edges = append(edges, questionnaire.EdgeInclude)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionnaireMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case questionnaire.EdgeInclude:
		ids := make([]ent.Value, 0, len(m.removedinclude))
		for id := range m.removedinclude {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionnaireMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedinclude {
		edges = append(edges, questionnaire.EdgeInclude)
	}
	if m.clearedcreated_by {
		edges = append(edges, questionnaire.EdgeCreatedBy)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionnaireMutation) EdgeCleared(name string) bool {
	switch name {
	case questionnaire.EdgeInclude:
		return m.clearedinclude
	case questionnaire.EdgeCreatedBy:
		return m.clearedcreated_by
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionnaireMutation) ClearEdge(name string) error {
	switch name {
	case questionnaire.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Questionnaire unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionnaireMutation) ResetEdge(name string) error {
	switch name {
	case questionnaire.EdgeInclude:
		m.ResetInclude()
		return nil
	case questionnaire.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Questionnaire edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	user_name     *string
	gender        *int
	addgender     *int
	phone_number  *string
	user_type     *int
	adduser_type  *int
	clearedFields map[string]struct{}
	create        map[int]struct{}
	removedcreate map[int]struct{}
	clearedcreate bool
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(i int) {
	m.gender = &i
	m.addgender = nil
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r int, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// AddGender adds i to the "gender" field.
func (m *UserMutation) AddGender(i int) {
	if m.addgender != nil {
		*m.addgender += i
	} else {
		m.addgender = &i
	}
}

// AddedGender returns the value that was added to the "gender" field in this mutation.
func (m *UserMutation) AddedGender() (r int, exists bool) {
	v := m.addgender
	if v == nil {
		return
	}
	return *v, true
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
	m.addgender = nil
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// SetUserType sets the "user_type" field.
func (m *UserMutation) SetUserType(i int) {
	m.user_type = &i
	m.adduser_type = nil
}

// UserType returns the value of the "user_type" field in the mutation.
func (m *UserMutation) UserType() (r int, exists bool) {
	v := m.user_type
	if v == nil {
		return
	}
	return *v, true
}

// OldUserType returns the old "user_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserType: %w", err)
	}
	return oldValue.UserType, nil
}

// AddUserType adds i to the "user_type" field.
func (m *UserMutation) AddUserType(i int) {
	if m.adduser_type != nil {
		*m.adduser_type += i
	} else {
		m.adduser_type = &i
	}
}

// AddedUserType returns the value that was added to the "user_type" field in this mutation.
func (m *UserMutation) AddedUserType() (r int, exists bool) {
	v := m.adduser_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserType resets all changes to the "user_type" field.
func (m *UserMutation) ResetUserType() {
	m.user_type = nil
	m.adduser_type = nil
}

// AddCreateIDs adds the "create" edge to the Questionnaire entity by ids.
func (m *UserMutation) AddCreateIDs(ids ...int) {
	if m.create == nil {
		m.create = make(map[int]struct{})
	}
	for i := range ids {
		m.create[ids[i]] = struct{}{}
	}
}

// ClearCreate clears the "create" edge to the Questionnaire entity.
func (m *UserMutation) ClearCreate() {
	m.clearedcreate = true
}

// CreateCleared reports if the "create" edge to the Questionnaire entity was cleared.
func (m *UserMutation) CreateCleared() bool {
	return m.clearedcreate
}

// RemoveCreateIDs removes the "create" edge to the Questionnaire entity by IDs.
func (m *UserMutation) RemoveCreateIDs(ids ...int) {
	if m.removedcreate == nil {
		m.removedcreate = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.create, ids[i])
		m.removedcreate[ids[i]] = struct{}{}
	}
}

// RemovedCreate returns the removed IDs of the "create" edge to the Questionnaire entity.
func (m *UserMutation) RemovedCreateIDs() (ids []int) {
	for id := range m.removedcreate {
		ids = append(ids, id)
	}
	return
}

// CreateIDs returns the "create" edge IDs in the mutation.
func (m *UserMutation) CreateIDs() (ids []int) {
	for id := range m.create {
		ids = append(ids, id)
	}
	return
}

// ResetCreate resets all changes to the "create" edge.
func (m *UserMutation) ResetCreate() {
	m.create = nil
	m.clearedcreate = false
	m.removedcreate = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	if m.user_type != nil {
		fields = append(fields, user.FieldUserType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUserName:
		return m.UserName()
	case user.FieldGender:
		return m.Gender()
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	case user.FieldUserType:
		return m.UserType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	case user.FieldUserType:
		return m.OldUserType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	case user.FieldUserType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addgender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.adduser_type != nil {
		fields = append(fields, user.FieldUserType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldGender:
		return m.AddedGender()
	case user.FieldUserType:
		return m.AddedUserType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldGender:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGender(v)
		return nil
	case user.FieldUserType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserType(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	case user.FieldUserType:
		m.ResetUserType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.create != nil {
		edges = append(edges, user.EdgeCreate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreate:
		ids := make([]ent.Value, 0, len(m.create))
		for id := range m.create {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcreate != nil {
		edges = append(edges, user.EdgeCreate)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreate:
		ids := make([]ent.Value, 0, len(m.removedcreate))
		for id := range m.removedcreate {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcreate {
		edges = append(edges, user.EdgeCreate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCreate:
		return m.clearedcreate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCreate:
		m.ResetCreate()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
