// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"questionnaire/ent/question"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 问题
	Question string `json:"question,omitempty"`
	// 问题类型，选择或文本
	Type int `json:"type,omitempty"`
	// 问卷ID
	QuestionnaireID int64 `json:"questionnaire_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges        QuestionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Own holds the value of the own edge.
	Own []*Answer `json:"own,omitempty"`
	// Included holds the value of the included edge.
	Included []*Questionnaire `json:"included,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnOrErr returns the Own value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) OwnOrErr() ([]*Answer, error) {
	if e.loadedTypes[0] {
		return e.Own, nil
	}
	return nil, &NotLoadedError{edge: "own"}
}

// IncludedOrErr returns the Included value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) IncludedOrErr() ([]*Questionnaire, error) {
	if e.loadedTypes[1] {
		return e.Included, nil
	}
	return nil, &NotLoadedError{edge: "included"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldID, question.FieldType, question.FieldQuestionnaireID:
			values[i] = new(sql.NullInt64)
		case question.FieldQuestion:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case question.FieldQuestion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field question", values[i])
			} else if value.Valid {
				q.Question = value.String
			}
		case question.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				q.Type = int(value.Int64)
			}
		case question.FieldQuestionnaireID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field questionnaire_id", values[i])
			} else if value.Valid {
				q.QuestionnaireID = value.Int64
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryOwn queries the "own" edge of the Question entity.
func (q *Question) QueryOwn() *AnswerQuery {
	return NewQuestionClient(q.config).QueryOwn(q)
}

// QueryIncluded queries the "included" edge of the Question entity.
func (q *Question) QueryIncluded() *QuestionnaireQuery {
	return NewQuestionClient(q.config).QueryIncluded(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("question=")
	builder.WriteString(q.Question)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", q.Type))
	builder.WriteString(", ")
	builder.WriteString("questionnaire_id=")
	builder.WriteString(fmt.Sprintf("%v", q.QuestionnaireID))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question
