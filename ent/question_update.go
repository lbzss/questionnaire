// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"questionnaire/ent/answer"
	"questionnaire/ent/predicate"
	"questionnaire/ent/question"
	"questionnaire/ent/questionnaire"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuestionUpdate) SetCreatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetQuestion sets the "question" field.
func (qu *QuestionUpdate) SetQuestion(s string) *QuestionUpdate {
	qu.mutation.SetQuestion(s)
	return qu
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuestion(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetQuestion(*s)
	}
	return qu
}

// SetType sets the "type" field.
func (qu *QuestionUpdate) SetType(i int) *QuestionUpdate {
	qu.mutation.ResetType()
	qu.mutation.SetType(i)
	return qu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableType(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetType(*i)
	}
	return qu
}

// AddType adds i to the "type" field.
func (qu *QuestionUpdate) AddType(i int) *QuestionUpdate {
	qu.mutation.AddType(i)
	return qu
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (qu *QuestionUpdate) SetQuestionnaireID(i int64) *QuestionUpdate {
	qu.mutation.ResetQuestionnaireID()
	qu.mutation.SetQuestionnaireID(i)
	return qu
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuestionnaireID(i *int64) *QuestionUpdate {
	if i != nil {
		qu.SetQuestionnaireID(*i)
	}
	return qu
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (qu *QuestionUpdate) AddQuestionnaireID(i int64) *QuestionUpdate {
	qu.mutation.AddQuestionnaireID(i)
	return qu
}

// AddOwnIDs adds the "own" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddOwnIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddOwnIDs(ids...)
	return qu
}

// AddOwn adds the "own" edges to the Answer entity.
func (qu *QuestionUpdate) AddOwn(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddOwnIDs(ids...)
}

// AddIncludedIDs adds the "included" edge to the Questionnaire entity by IDs.
func (qu *QuestionUpdate) AddIncludedIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddIncludedIDs(ids...)
	return qu
}

// AddIncluded adds the "included" edges to the Questionnaire entity.
func (qu *QuestionUpdate) AddIncluded(q ...*Questionnaire) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddIncludedIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearOwn clears all "own" edges to the Answer entity.
func (qu *QuestionUpdate) ClearOwn() *QuestionUpdate {
	qu.mutation.ClearOwn()
	return qu
}

// RemoveOwnIDs removes the "own" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveOwnIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveOwnIDs(ids...)
	return qu
}

// RemoveOwn removes "own" edges to Answer entities.
func (qu *QuestionUpdate) RemoveOwn(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveOwnIDs(ids...)
}

// ClearIncluded clears all "included" edges to the Questionnaire entity.
func (qu *QuestionUpdate) ClearIncluded() *QuestionUpdate {
	qu.mutation.ClearIncluded()
	return qu
}

// RemoveIncludedIDs removes the "included" edge to Questionnaire entities by IDs.
func (qu *QuestionUpdate) RemoveIncludedIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveIncludedIDs(ids...)
	return qu
}

// RemoveIncluded removes "included" edges to Questionnaire entities.
func (qu *QuestionUpdate) RemoveIncluded(q ...*Questionnaire) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveIncludedIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	qu.defaults()
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qu *QuestionUpdate) defaults() {
	if _, ok := qu.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		qu.mutation.SetUpdatedAt(v)
	}
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.Question(); ok {
		_spec.SetField(question.FieldQuestion, field.TypeString, value)
	}
	if value, ok := qu.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedType(); ok {
		_spec.AddField(question.FieldType, field.TypeInt, value)
	}
	if value, ok := qu.mutation.QuestionnaireID(); ok {
		_spec.SetField(question.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := qu.mutation.AddedQuestionnaireID(); ok {
		_spec.AddField(question.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if qu.mutation.OwnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedOwnIDs(); len(nodes) > 0 && !qu.mutation.OwnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.OwnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.IncludedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedIncludedIDs(); len(nodes) > 0 && !qu.mutation.IncludedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.IncludedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuestionUpdateOne) SetCreatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetQuestion sets the "question" field.
func (quo *QuestionUpdateOne) SetQuestion(s string) *QuestionUpdateOne {
	quo.mutation.SetQuestion(s)
	return quo
}

// SetNillableQuestion sets the "question" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuestion(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetQuestion(*s)
	}
	return quo
}

// SetType sets the "type" field.
func (quo *QuestionUpdateOne) SetType(i int) *QuestionUpdateOne {
	quo.mutation.ResetType()
	quo.mutation.SetType(i)
	return quo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableType(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetType(*i)
	}
	return quo
}

// AddType adds i to the "type" field.
func (quo *QuestionUpdateOne) AddType(i int) *QuestionUpdateOne {
	quo.mutation.AddType(i)
	return quo
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (quo *QuestionUpdateOne) SetQuestionnaireID(i int64) *QuestionUpdateOne {
	quo.mutation.ResetQuestionnaireID()
	quo.mutation.SetQuestionnaireID(i)
	return quo
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuestionnaireID(i *int64) *QuestionUpdateOne {
	if i != nil {
		quo.SetQuestionnaireID(*i)
	}
	return quo
}

// AddQuestionnaireID adds i to the "questionnaire_id" field.
func (quo *QuestionUpdateOne) AddQuestionnaireID(i int64) *QuestionUpdateOne {
	quo.mutation.AddQuestionnaireID(i)
	return quo
}

// AddOwnIDs adds the "own" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddOwnIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddOwnIDs(ids...)
	return quo
}

// AddOwn adds the "own" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddOwn(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddOwnIDs(ids...)
}

// AddIncludedIDs adds the "included" edge to the Questionnaire entity by IDs.
func (quo *QuestionUpdateOne) AddIncludedIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddIncludedIDs(ids...)
	return quo
}

// AddIncluded adds the "included" edges to the Questionnaire entity.
func (quo *QuestionUpdateOne) AddIncluded(q ...*Questionnaire) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddIncludedIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearOwn clears all "own" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearOwn() *QuestionUpdateOne {
	quo.mutation.ClearOwn()
	return quo
}

// RemoveOwnIDs removes the "own" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveOwnIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveOwnIDs(ids...)
	return quo
}

// RemoveOwn removes "own" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveOwn(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveOwnIDs(ids...)
}

// ClearIncluded clears all "included" edges to the Questionnaire entity.
func (quo *QuestionUpdateOne) ClearIncluded() *QuestionUpdateOne {
	quo.mutation.ClearIncluded()
	return quo
}

// RemoveIncludedIDs removes the "included" edge to Questionnaire entities by IDs.
func (quo *QuestionUpdateOne) RemoveIncludedIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveIncludedIDs(ids...)
	return quo
}

// RemoveIncluded removes "included" edges to Questionnaire entities.
func (quo *QuestionUpdateOne) RemoveIncluded(q ...*Questionnaire) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveIncludedIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	quo.defaults()
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (quo *QuestionUpdateOne) defaults() {
	if _, ok := quo.mutation.UpdatedAt(); !ok {
		v := question.UpdateDefaultUpdatedAt()
		quo.mutation.SetUpdatedAt(v)
	}
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.Question(); ok {
		_spec.SetField(question.FieldQuestion, field.TypeString, value)
	}
	if value, ok := quo.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedType(); ok {
		_spec.AddField(question.FieldType, field.TypeInt, value)
	}
	if value, ok := quo.mutation.QuestionnaireID(); ok {
		_spec.SetField(question.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if value, ok := quo.mutation.AddedQuestionnaireID(); ok {
		_spec.AddField(question.FieldQuestionnaireID, field.TypeInt64, value)
	}
	if quo.mutation.OwnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedOwnIDs(); len(nodes) > 0 && !quo.mutation.OwnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.OwnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   question.OwnTable,
			Columns: question.OwnPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.IncludedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedIncludedIDs(); len(nodes) > 0 && !quo.mutation.IncludedCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.IncludedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   question.IncludedTable,
			Columns: question.IncludedPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionnaire.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
